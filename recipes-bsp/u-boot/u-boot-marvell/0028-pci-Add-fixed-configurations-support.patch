From 091d9890b9e08a9e407f4474c721a804045cbe23 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <sergey.temerkhanov@auriga.com>
Date: Thu, 19 Mar 2015 17:46:16 +0300
Subject: [PATCH 0028/1200] pci: Add fixed configurations support

---
 drivers/pci/pci.c          |  12 +++-
 drivers/pci/pci_auto_old.c | 122 ++++++++++++++++++++++++++-----------
 2 files changed, 97 insertions(+), 37 deletions(-)

diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index bbc7dab366..1cb0b8c364 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -192,10 +192,10 @@ int pci_hose_config_device(struct pci_controller *hose,
 			   unsigned long command)
 {
 	u32 bar_response;
-	unsigned int old_command;
+	u32 old_command;
 	pci_addr_t bar_value;
 	pci_size_t bar_size;
-	unsigned char pin;
+	u8 pin;
 	int bar, found_mem64;
 
 	debug("PCI Config: I/O=0x%lx, Memory=0x%llx, Command=0x%lx\n", io,
@@ -326,6 +326,14 @@ void pci_cfgfunc_do_nothing(struct pci_controller *hose,
  */
 extern int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev);
 
+__weak int __pci_config_fixed(struct pci_controller *hose, pci_dev_t dev)
+{
+	/*
+	 * Check if pci device has a fixed configuration
+	 */
+	return 0;
+}
+
 #ifdef CONFIG_PCI_SCAN_SHOW
 __weak int pci_print_dev(struct pci_controller *hose, pci_dev_t dev)
 {
diff --git a/drivers/pci/pci_auto_old.c b/drivers/pci/pci_auto_old.c
index edc9a7b3c1..004143349d 100644
--- a/drivers/pci/pci_auto_old.c
+++ b/drivers/pci/pci_auto_old.c
@@ -22,6 +22,57 @@
 #define CONFIG_SYS_PCI_CACHE_LINE_SIZE	8
 #endif
 
+/*
+ *
+ */
+
+extern int pci_config_fixed(struct pci_controller *hose, pci_dev_t dev);
+
+void pciauto_region_init(struct pci_region *res)
+{
+	/*
+	 * Avoid allocating PCI resources from address 0 -- this is illegal
+	 * according to PCI 2.1 and moreover, this is known to cause Linux IDE
+	 * drivers to fail. Use a reasonable starting value of 0x1000 instead.
+	 */
+	res->bus_lower = res->bus_start ? res->bus_start : 0x1000;
+}
+
+void pciauto_region_align(struct pci_region *res, pci_size_t size)
+{
+	res->bus_lower = ((res->bus_lower - 1) | (size - 1)) + 1;
+}
+
+int pciauto_region_allocate(struct pci_region *res, pci_size_t size,
+	pci_addr_t *bar)
+{
+	pci_addr_t addr;
+
+	if (!res) {
+		debug("No resource");
+		goto error;
+	}
+
+	addr = ((res->bus_lower - 1) | (size - 1)) + 1;
+
+	if (addr - res->bus_start + size > res->size) {
+		debug("No room in resource");
+		goto error;
+	}
+
+	res->bus_lower = addr + size;
+
+	debug("address=0x%llx bus_lower=0x%llx", (unsigned long long)addr,
+	      (unsigned long long)res->bus_lower);
+
+	*bar = addr;
+	return 0;
+
+ error:
+	*bar = (pci_addr_t)-1;
+	return -1;
+}
+
 /*
  *
  */
@@ -322,27 +373,35 @@ int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev)
 	struct pci_region *pci_mem;
 	struct pci_region *pci_prefetch;
 	struct pci_region *pci_io;
-	unsigned int sub_bus = PCI_BUS(dev);
-	unsigned short class;
+	u8 hdr_type, pri_bus, sec_bus, sub_bus =  PCI_BUS(dev);
 	int n;
 
 	pci_mem = hose->pci_mem;
 	pci_prefetch = hose->pci_prefetch;
 	pci_io = hose->pci_io;
 
-	pci_hose_read_config_word(hose, dev, PCI_CLASS_DEVICE, &class);
+	pci_hose_read_config_byte(hose, dev, PCI_HEADER_TYPE, &hdr_type);
 
-	switch (class) {
-	case PCI_CLASS_BRIDGE_PCI:
+	switch (hdr_type) {
+	case PCI_HEADER_TYPE_BRIDGE:
 		debug("PCI Autoconfig: Found P2P bridge, device %d\n",
 		      PCI_DEV(dev));
-
-		pciauto_setup_device(hose, dev, 2, pci_mem,
-				     pci_prefetch, pci_io);
+		hose->current_busno++;
+		if (!pci_config_fixed(hose, dev)) {
+			pciauto_setup_device(hose, dev, 2, pci_mem,
+					     pci_prefetch, pci_io);
+		}
 
 		/* Passing in current_busno allows for sibling P2P bridges */
 		hose->current_busno++;
 		pciauto_prescan_setup_bridge(hose, dev, hose->current_busno);
+		if (!pci_config_fixed(hose, dev)) {
+			pciauto_prescan_setup_bridge(hose, dev, hose->current_busno);
+		} else {
+			pci_hose_read_config_byte(hose, dev, PCI_PRIMARY_BUS, &pri_bus);
+			pci_hose_read_config_byte(hose, dev, PCI_SECONDARY_BUS, &sec_bus);
+			pci_hose_read_config_byte(hose, dev, PCI_SUBORDINATE_BUS, &sub_bus);
+		}
 		/*
 		 * need to figure out if this is a subordinate bridge on the bus
 		 * to be able to properly set the pri/sec/sub bridge registers.
@@ -351,12 +410,25 @@ int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev)
 
 		/* figure out the deepest we've gone for this leg */
 		sub_bus = max((unsigned int)n, sub_bus);
-		pciauto_postscan_setup_bridge(hose, dev, sub_bus);
+		if (!pci_config_fixed(hose, dev)) {
+			pciauto_postscan_setup_bridge(hose, dev, sub_bus);
+		}
 
 		sub_bus = hose->current_busno;
 		break;
+/*
+	case PCI_CLASS_STORAGE_IDE:
+		pci_hose_read_config_byte(hose, dev, PCI_CLASS_PROG, &prg_iface);
+		if (!(prg_iface & PCIAUTO_IDE_MODE_MASK)) {
+			DEBUGF("PCI Autoconfig: Skipping legacy mode IDE controller\n");
+			return sub_bus;
+		}
 
-	case PCI_CLASS_BRIDGE_CARDBUS:
+		pciauto_setup_device(hose, dev, 6, hose->pci_mem,
+			hose->pci_prefetch, hose->pci_io);
+		break;
+*/
+	case PCI_HEADER_TYPE_CARDBUS:
 		/*
 		 * just do a minimal setup of the bridge,
 		 * let the OS take care of the rest
@@ -370,32 +442,12 @@ int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev)
 		hose->current_busno++;
 		break;
 
-#if defined(CONFIG_PCIAUTO_SKIP_HOST_BRIDGE)
-	case PCI_CLASS_BRIDGE_OTHER:
-		debug("PCI Autoconfig: Skipping bridge device %d\n",
-		      PCI_DEV(dev));
-		break;
-#endif
-#if defined(CONFIG_MPC834x) && !defined(CONFIG_VME8349)
-	case PCI_CLASS_BRIDGE_OTHER:
-		/*
-		 * The host/PCI bridge 1 seems broken in 8349 - it presents
-		 * itself as 'PCI_CLASS_BRIDGE_OTHER' and appears as an _agent_
-		 * device claiming resources io/mem/irq.. we only allow for
-		 * the PIMMR window to be allocated (BAR0 - 1MB size)
-		 */
-		debug("PCI Autoconfig: Broken bridge found, only minimal config\n");
-		pciauto_setup_device(hose, dev, 0, hose->pci_mem,
-			hose->pci_prefetch, hose->pci_io);
-		break;
-#endif
-
-	case PCI_CLASS_PROCESSOR_POWERPC: /* an agent or end-point */
-		debug("PCI AutoConfig: Found PowerPC device\n");
-
 	default:
-		pciauto_setup_device(hose, dev, 6, pci_mem,
-				     pci_prefetch, pci_io);
+		if (!pci_config_fixed(hose, dev)) {
+			pciauto_setup_device(hose, dev, 6, pci_mem,
+					     pci_prefetch, pci_io);
+		}
+
 		break;
 	}
 
-- 
2.22.0


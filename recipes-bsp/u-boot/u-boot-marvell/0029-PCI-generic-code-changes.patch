From 5b6c9291163688728a9e32172776eaa8005fcb25 Mon Sep 17 00:00:00 2001
From: Sergey Temerkhanov <sergey.temerkhanov@auriga.com>
Date: Tue, 31 Mar 2015 19:21:14 +0300
Subject: [PATCH 0029/1200] PCI generic code changes

---
 drivers/pci/pci.c          | 12 +++++++++++-
 drivers/pci/pci_auto_old.c | 13 ++++++++++++-
 2 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 1cb0b8c364..ec9d6475bb 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -326,7 +326,7 @@ void pci_cfgfunc_do_nothing(struct pci_controller *hose,
  */
 extern int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev);
 
-__weak int __pci_config_fixed(struct pci_controller *hose, pci_dev_t dev)
+__weak int pci_config_fixed(struct pci_controller *hose, pci_dev_t dev)
 {
 	/*
 	 * Check if pci device has a fixed configuration
@@ -334,6 +334,16 @@ __weak int __pci_config_fixed(struct pci_controller *hose, pci_dev_t dev)
 	return 0;
 }
 
+__weak int pci_prescan_config(struct pci_controller *hose, pci_dev_t dev)
+{
+	return 0;
+}
+
+__weak int pci_postscan_config(struct pci_controller *hose, pci_dev_t dev)
+{
+	return 0;
+}
+
 #ifdef CONFIG_PCI_SCAN_SHOW
 __weak int pci_print_dev(struct pci_controller *hose, pci_dev_t dev)
 {
diff --git a/drivers/pci/pci_auto_old.c b/drivers/pci/pci_auto_old.c
index 004143349d..aac5a1e9ce 100644
--- a/drivers/pci/pci_auto_old.c
+++ b/drivers/pci/pci_auto_old.c
@@ -364,6 +364,9 @@ void pciauto_postscan_setup_bridge(struct pci_controller *hose,
 }
 
 
+extern int pci_prescan_config(struct pci_controller *hose, pci_dev_t dev);
+extern int pci_postscan_config(struct pci_controller *hose, pci_dev_t dev);
+
 /*
  * HJF: Changed this to return int. I think this is required
  * to get the correct result when scanning bridges
@@ -396,11 +399,15 @@ int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev)
 		hose->current_busno++;
 		pciauto_prescan_setup_bridge(hose, dev, hose->current_busno);
 		if (!pci_config_fixed(hose, dev)) {
+			pci_prescan_config(hose, dev);
 			pciauto_prescan_setup_bridge(hose, dev, hose->current_busno);
 		} else {
 			pci_hose_read_config_byte(hose, dev, PCI_PRIMARY_BUS, &pri_bus);
+			pri_bus += hose->first_busno;
 			pci_hose_read_config_byte(hose, dev, PCI_SECONDARY_BUS, &sec_bus);
+			sec_bus += hose->first_busno;
 			pci_hose_read_config_byte(hose, dev, PCI_SUBORDINATE_BUS, &sub_bus);
+			sub_bus += hose->first_busno;
 		}
 		/*
 		 * need to figure out if this is a subordinate bridge on the bus
@@ -409,7 +416,7 @@ int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev)
 		n = pci_hose_scan_bus(hose, hose->current_busno);
 
 		/* figure out the deepest we've gone for this leg */
-		sub_bus = max((unsigned int)n, sub_bus);
+		sub_bus = max((unsigned int)n, (unsigned int)sub_bus);
 		if (!pci_config_fixed(hose, dev)) {
 			pciauto_postscan_setup_bridge(hose, dev, sub_bus);
 		}
@@ -443,11 +450,15 @@ int pciauto_config_device(struct pci_controller *hose, pci_dev_t dev)
 		break;
 
 	default:
+		pci_prescan_config(hose, dev);
+
 		if (!pci_config_fixed(hose, dev)) {
 			pciauto_setup_device(hose, dev, 6, pci_mem,
 					     pci_prefetch, pci_io);
 		}
 
+		pci_postscan_config(hose, dev);
+
 		break;
 	}
 
-- 
2.22.0


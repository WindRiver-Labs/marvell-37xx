From 13fdb82a7a7c201f7b228df107de6bd0d539f982 Mon Sep 17 00:00:00 2001
From: Chandrakala Chavva <cchavva@caviumnetworks.com>
Date: Wed, 11 May 2016 13:09:09 -0700
Subject: [PATCH 0146/1200] Revert "net: thunderx: Add BGX support for 81xx
 soc"

This reverts commit 60445579189d7031c04d4c610579e3fcb3ccbc4d.
---
 drivers/net/cavium/thunder_bgx.c | 273 ++++++++++---------------------
 drivers/net/cavium/thunder_bgx.h |  19 +--
 2 files changed, 96 insertions(+), 196 deletions(-)

diff --git a/drivers/net/cavium/thunder_bgx.c b/drivers/net/cavium/thunder_bgx.c
index e62583f9ca..fd4ffc6a91 100644
--- a/drivers/net/cavium/thunder_bgx.c
+++ b/drivers/net/cavium/thunder_bgx.c
@@ -28,11 +28,6 @@
 #include "nic.h"
 #include "thunder_bgx.h"
 
-enum bgx_type {
-	bgx_type_88xx,
-	bgx_type_81xx,
-};
-
 struct lmac {
 	struct bgx		*bgx;
 	int			dmac;
@@ -42,13 +37,13 @@ struct lmac {
 	int			lmacid_bd; /* ID on board */
 	struct eth_device	netdev;
 	struct mii_dev		*mii_bus;
-	struct phy_device	*phydev;
-	unsigned int		last_duplex;
-	unsigned int		last_link;
-	unsigned int		last_speed;
-	int			lane_to_sds;
+	struct phy_device       *phydev;
+	unsigned int            last_duplex;
+	unsigned int            last_link;
+	unsigned int            last_speed;
+	int                     lane_to_sds;
 	int			use_training;
-	int			lmac_type;
+	int                     lmac_type;
 	u8			qlm_mode;
 	int			qlm;
 };
@@ -59,7 +54,6 @@ struct bgx {
 	int			lmac_count;
 	void __iomem		*reg_base;
 	struct pci_dev		*pdev;
-	enum bgx_type		hwtype;
 };
 
 struct bgx_board_info bgx_board_info[CONFIG_MAX_BGX];
@@ -90,12 +84,12 @@ static void bgx_reg_write(struct bgx *bgx, uint8_t lmac,
 }
 
 static void bgx_reg_modify(struct bgx *bgx, uint8_t lmac,
-			   uint64_t offset, uint64_t val)
+                           uint64_t offset, uint64_t val)
 {
 	uint64_t addr = (uintptr_t)bgx->reg_base +
 				((uint32_t)lmac << 20) + offset;
 
-	writeq(val | bgx_reg_read(bgx, lmac, offset), (void *)addr);
+        writeq(val | bgx_reg_read(bgx, lmac, offset), (void *)addr);
 }
 
 static int bgx_poll_reg(struct bgx *bgx, uint8_t lmac,
@@ -207,7 +201,7 @@ void bgx_lmac_internal_loopback(int node, int bgx_idx,
 		return;
 
 	lmac = &bgx->lmac[lmac_idx];
-	if (lmac->qlm_mode == BGX_MODE_SGMII) {
+	if (lmac->qlm_mode == QLM_MODE_SGMII) {
 		cfg = bgx_reg_read(bgx, lmac_idx, BGX_GMP_PCS_MRX_CTL);
 		if (enable)
 			cfg |= PCS_MRX_CTL_LOOPBACK1;
@@ -299,10 +293,12 @@ static int bgx_lmac_sgmii_init(struct bgx *bgx, int lmacid)
 	return 0;
 }
 
-static int bgx_lmac_xaui_init(struct bgx *bgx, struct lmac *lmac)
+static int bgx_lmac_xaui_init(struct bgx *bgx, int lmacid, int lmac_type)
 {
 	u64 cfg;
-	int lmacid = lmac->lmacid;
+	struct lmac *lmac;
+
+	lmac = &bgx->lmac[lmacid];
 
 	/* Reset SPU */
 	bgx_reg_modify(bgx, lmacid, BGX_SPUX_CONTROL1, SPU_CTL_RESET);
@@ -318,7 +314,7 @@ static int bgx_lmac_xaui_init(struct bgx *bgx, struct lmac *lmac)
 
 	bgx_reg_modify(bgx, lmacid, BGX_SPUX_CONTROL1, SPU_CTL_LOW_POWER);
 	/* Set interleaved running disparity for RXAUI */
-	if (lmac->qlm_mode != BGX_MODE_RXAUI)
+	if (lmac->qlm_mode != QLM_MODE_RXAUI)
 		bgx_reg_modify(bgx, lmacid,
 			       BGX_SPUX_MISC_CONTROL, SPU_MISC_CTL_RX_DIS);
 	else
@@ -360,9 +356,9 @@ static int bgx_lmac_xaui_init(struct bgx *bgx, struct lmac *lmac)
 	bgx_reg_write(bgx, lmacid, BGX_SPUX_AN_CONTROL, cfg);
 
 	cfg = bgx_reg_read(bgx, lmacid, BGX_SPUX_AN_ADV);
-	if (lmac->qlm_mode == BGX_MODE_10G_KR)
+	if (lmac->qlm_mode == QLM_MODE_10G_KR)
 		cfg |= (1 << 23);
-	else if (lmac->qlm_mode == BGX_MODE_40G_KR4)
+	else if (lmac->qlm_mode == QLM_MODE_40G_KR4)
 		cfg |= (1 << 24);
 	else
 		cfg &= ~((1 << 23) | (1 << 24));
@@ -536,7 +532,7 @@ static int bgx_lmac_enable(struct bgx *bgx, int8_t lmacid)
 
 	debug("bgx_lmac_enable: lmac: %p, lmacid = %d", lmac, lmacid);
 
-	if (lmac->qlm_mode == BGX_MODE_SGMII) {
+	if (lmac->qlm_mode == QLM_MODE_SGMII) {
 		if (bgx_lmac_sgmii_init(bgx, lmacid))
 			return -1;
 		cfg = bgx_reg_read(bgx, lmacid, BGX_GMP_GMI_TXX_APPEND);
@@ -544,7 +540,7 @@ static int bgx_lmac_enable(struct bgx *bgx, int8_t lmacid)
 		bgx_reg_modify(bgx, lmacid, BGX_GMP_GMI_TXX_APPEND, cfg);
 		bgx_reg_write(bgx, lmacid, BGX_GMP_GMI_TXX_MIN_PKT, 60 - 1);
 	} else {
-		if (bgx_lmac_xaui_init(bgx, lmac))
+		if (bgx_lmac_xaui_init(bgx, lmacid, lmac->lmac_type))
 			return -1;
 		cfg = bgx_reg_read(bgx, lmacid, BGX_SMUX_TX_APPEND);
 		cfg |= ((1ull << 2) | (1ull << 1)); /* FCS and PAD */
@@ -557,7 +553,7 @@ static int bgx_lmac_enable(struct bgx *bgx, int8_t lmacid)
 		       CMR_EN | CMR_PKT_RX_EN | CMR_PKT_TX_EN);
 
 	
-	if (lmac->qlm_mode == BGX_MODE_SGMII) {
+	if (lmac->qlm_mode == QLM_MODE_SGMII) {
 		lmac->phydev = phy_connect(lmac->mii_bus, lmac->lmacid_bd,
 					   &lmac->netdev, PHY_INTERFACE_MODE_SGMII);
 
@@ -618,42 +614,42 @@ static void bgx_init_hw(struct bgx *bgx)
 			continue;
 
 		switch (lmac->qlm_mode) {
-		case BGX_MODE_SGMII:
+		case QLM_MODE_SGMII:
 			lmac->lmac_type = 0;
 			lmac->lane_to_sds = lmacid;
 			lmac_count++;
 			break;
-		case BGX_MODE_XAUI:
+		case QLM_MODE_XAUI:
 			if (lmacid != 0)
 				continue;
 			lmac->lmac_type = 1;
 			lmac->lane_to_sds = 0xE4;
 			lmac_count = 1;
 			break;
-		case BGX_MODE_RXAUI:
+		case QLM_MODE_RXAUI:
 			lmac->lmac_type = 2;
 			lmac->lane_to_sds = (lmacid) ? 0xE : 0x4;
 			lmac_count++;
 			break;
-		case BGX_MODE_XFI:
+		case QLM_MODE_XFI:
 			lmac->lmac_type = 3;
 			lmac->lane_to_sds = lmacid;
 			lmac_count++;
 			break;
-		case BGX_MODE_XLAUI:
+		case QLM_MODE_XLAUI:
 			if (lmacid != 0)
 				continue;
 			lmac->lmac_type = 4;
 			lmac->lane_to_sds = 0xE4;
 			lmac_count = 1;
 			break;
-		case BGX_MODE_10G_KR:
+		case QLM_MODE_10G_KR:
 			lmac->lmac_type = 3;
 			lmac->lane_to_sds = lmacid;
 			lmac->use_training = 1;
 			lmac_count++;
 			break;
-		case BGX_MODE_40G_KR4:
+		case QLM_MODE_40G_KR4:
 			if (lmacid != 0)
 				continue;
 			lmac->lmac_type = 4;
@@ -695,167 +691,74 @@ static void bgx_init_hw(struct bgx *bgx)
 		bgx_reg_write(bgx, 0, BGX_CMR_RX_STREERING + (i * 8), 0x00);
 }
 
-static void lmac_set_lane2sds(struct lmac *lmac)
-{
-	switch (lmac->lmac_type) {
-	case BGX_MODE_SGMII:
-	case BGX_MODE_XFI:
-		lmac->lane_to_sds = lmac->lmacid;
-		break;
-	case BGX_MODE_XAUI:
-	case BGX_MODE_XLAUI:
-		lmac->lane_to_sds = 0xE4;
-		break;
-	case BGX_MODE_RXAUI:
-		lmac->lane_to_sds = (lmac->lmacid) ? 0xE : 0x4;
-		break;
-	default:
-		lmac->lane_to_sds = 0;
-		break;
-	}
-}
-
-static void bgx_print_qlm_mode(struct bgx *bgx, u8 lmacid)
-{
-	struct lmac *lmac;
-	const char *modestr;
-	u8 dlm;
-
-	if (lmacid > MAX_LMAC_PER_BGX)
-		return;
-
-	lmac = &bgx->lmac[lmacid];
-	dlm = (lmacid / 2) + (bgx->bgx_id * 2);
-
-	switch (lmac->lmac_type) {
-	case BGX_MODE_SGMII:
-		modestr = "SGMII";
-		break;
-	case BGX_MODE_XAUI:
-		modestr = "XAUI";
-		break;
-	case BGX_MODE_RXAUI:
-		modestr = "RXAUI";
-		break;
-	case BGX_MODE_XFI:
-		if (!lmac->use_training)
-			modestr = "XFI";
-		else
-			modestr = "10G_KR";
-		break;
-	case BGX_MODE_XLAUI:
-		if (!lmac->use_training)
-			modestr = "XLAUI";
-		else
-			modestr = "40G_KR4";
-		break;
-	default:
-		modestr = "INVALID";
-	}
-
-	if (bgx->hwtype != bgx_type_81xx)
-		printf("BGX%d QLM mode: %s\n", bgx->bgx_id, modestr);
-	else
-		printf("BGX%d DLM%d mode: %s\n", bgx->bgx_id, dlm, modestr);
-}
-
-static void bgx_set_lmac_config(struct bgx *bgx, u8 idx)
+static void bgx_get_qlm_mode(struct bgx *bgx)
 {
 	struct lmac *lmac;
-	struct lmac *olmac;
-	u64 cmr_cfg;
-	u8 lmac_type;
-	u8 lane_to_sds;
-
-	lmac = &bgx->lmac[idx];
-	lmac->lmacid = idx;
-
-	if (bgx->hwtype != bgx_type_81xx) {
-		/* Read LMAC0 type to figure out QLM mode
-		 * This is configured by low level firmware
-		 */
-		cmr_cfg = bgx_reg_read(bgx, 0, BGX_CMRX_CFG);
-		lmac->lmac_type = (cmr_cfg >> 8) & 0x07;
-		lmac->use_training =
-			bgx_reg_read(bgx, 0, BGX_SPUX_BR_PMD_CRTL) &
-				SPU_PMD_CRTL_TRAIN_EN;
-		lmac_set_lane2sds(lmac);
-	}
+	int lmacid;
 
-	/* On 81xx BGX can be split across 2 DLMs
-	 * firmware programs lmac_type of LMAC1 and LMAC3
+        /* Read LMACx type to figure out QLM mode
+	 * This is configured by low level firmware
 	 */
-	if ((idx == 1) || (idx == 3)) {
-		cmr_cfg = bgx_reg_read(bgx, idx, BGX_CMRX_CFG);
-		lmac_type = (u8)((cmr_cfg >> 8) & 0x07);
-		lane_to_sds = (u8)(cmr_cfg & 0xFF);
-		/* Check if config is not reset value */
-		if ((lmac_type == 0) && (lane_to_sds == 0xE4))
-			lmac->lmac_type = BGX_MODE_INVALID;
-		else
-			lmac->lmac_type = lmac_type;
-		lmac->use_training =
-			bgx_reg_read(bgx, idx, BGX_SPUX_BR_PMD_CRTL) &
-				SPU_PMD_CRTL_TRAIN_EN;
-		lmac_set_lane2sds(lmac);
-
-		/* Set LMAC type of other lmac on same DLM i.e LMAC 0/2 */
-		olmac = &bgx->lmac[idx - 1];
-		olmac->lmac_type = lmac->lmac_type;
-		olmac->use_training =
-		bgx_reg_read(bgx, idx - 1, BGX_SPUX_BR_PMD_CRTL) &
-			SPU_PMD_CRTL_TRAIN_EN;
-		lmac_set_lane2sds(lmac);
-	}
-}
-
-static bool is_dlm0_in_bgx_mode(struct bgx *bgx)
-{
-	struct lmac *lmac;
-
-	if (bgx->hwtype != bgx_type_81xx)
-		return true;
-
-	lmac = &bgx->lmac[1];
-	if (lmac->lmac_type == BGX_MODE_INVALID)
-		return false;
-
-	return true;
-}
-
-
-static void bgx_get_qlm_mode(struct bgx *bgx)
-{
-	struct lmac *lmac01;
-	struct lmac *lmac23;
-	u8  idx;
-
-	/* It is assumed that low level firmware sets this value */
-	bgx->lmac_count = bgx_reg_read(bgx, 0, BGX_CMR_RX_LMACS) & 0x7;
-	if (bgx->lmac_count > MAX_LMAC_PER_BGX)
-		bgx->lmac_count = MAX_LMAC_PER_BGX;
-
-	for (idx = 0; idx < bgx->lmac_count; idx++)
-		bgx_set_lmac_config(bgx, idx);
+	for (lmacid = 0; lmacid < MAX_LMAC_PER_BGX; lmacid++) {
+        	int lmac_type;
+		int train_en;
+		int index = (lmacid < 2) ? 1 : 3;
 
-	if (bgx->hwtype != bgx_type_81xx) {
-		bgx_print_qlm_mode(bgx, 0);
-		return;
-	}
+		lmac = &bgx->lmac[lmacid];
 
-	bgx_print_qlm_mode(bgx, 1);
-	bgx_print_qlm_mode(bgx, 3);
+		if (lmac->qlm == -1)
+			continue;
 
-	/* If DLM0 is not in BGX mode then LMAC0/1 have
-	 * to be configured with serdes lanes of DLM1
-	 */
-	if (is_dlm0_in_bgx_mode(bgx) || (bgx->lmac_count > 2))
-		return;
-	for (idx = 0; idx < bgx->lmac_count; idx++) {
-		lmac01 = &bgx->lmac[idx];
-		lmac23 = &bgx->lmac[idx + 2];
-		lmac01->lmac_type = lmac23->lmac_type;
-		lmac01->lane_to_sds = lmac23->lane_to_sds;
+        	lmac_type = bgx_reg_read(bgx, index, BGX_CMRX_CFG);
+        	lmac->lmac_type = (lmac_type >> 8) & 0x07;
+		debug("bgx_get_qlm_mode:%d:%d: lmac_type = %d\n", bgx->bgx_id,
+				lmacid, lmac->lmac_type);
+
+		train_en = (readq(CSR_PA(0, GSERX_SCRATCH(lmac->qlm))) & 0xf);
+
+        	switch(lmac->lmac_type) {
+        	case 0:
+                	lmac->qlm_mode = QLM_MODE_SGMII;
+			printf("BGX%d QLM%d LMAC%d mode: SGMII\n",
+					bgx->bgx_id, lmac->qlm, lmacid);
+                	break;
+        	case 1:
+                	lmac->qlm_mode = QLM_MODE_XAUI;
+			printf("BGX%d QLM%d LMAC%d mode: XAUI\n",
+					bgx->bgx_id, lmac->qlm, lmacid);
+                	break;
+        	case 2:
+                	lmac->qlm_mode = QLM_MODE_RXAUI;
+			printf("BGX%d QLM%d LMAC%d mode: RXAUI\n",
+					bgx->bgx_id, lmac->qlm, lmacid);
+                	break;
+        	case 3:
+			if (((lmacid < 2) && (train_en & (1 << lmacid)))
+			    || (train_en & (1 << (lmacid - 2)))) {
+				lmac->qlm_mode = QLM_MODE_10G_KR;
+				printf("BGX%d QLM%d LMAC%d mode: 10G_KR\n",
+					bgx->bgx_id, lmac->qlm, lmacid);
+			} else {
+				lmac->qlm_mode = QLM_MODE_XFI;
+				printf("BGX%d QLM%d LMAC%d mode: XFI\n",
+					bgx->bgx_id, lmac->qlm, lmacid);
+			}
+                	break;
+        	case 4:
+			if (((lmacid < 2) && (train_en & (1 << lmacid)))
+			    || (train_en & (1 << (lmacid - 2)))) {
+				lmac->qlm_mode = QLM_MODE_40G_KR4;
+				printf("BGX%d QLM%d LMAC%d mode: 40G_KR4\n",
+					bgx->bgx_id, lmac->qlm, lmacid);
+			} else {
+				lmac->qlm_mode = QLM_MODE_XLAUI;
+				printf("BGX%d QLM%d LMAC%d mode: XLAUI\n",
+					bgx->bgx_id, lmac->qlm, lmacid);
+			}
+                	break;
+		default:
+			break;
+        	}
 	}
 }
 
@@ -900,7 +803,7 @@ int thunderx_bgx_initialize(unsigned int bgx_idx, unsigned int node)
 
 	/* Enable all LMACs */
 	for (lmac = 0; lmac < bgx->lmac_count; lmac++) {
-		if (bgx->lmac[lmac].qlm_mode == BGX_MODE_SGMII) {
+		if (bgx->lmac[lmac].qlm_mode == QLM_MODE_SGMII) {
 			bgx->lmac[lmac].mii_bus = miiphy_get_dev_by_name(mii_name);
 			debug("bgx->lmac[lmac].mii_bus: %p\n", bgx->lmac[lmac].mii_bus);
 			if (!bgx->lmac[lmac].mii_bus) {
diff --git a/drivers/net/cavium/thunder_bgx.h b/drivers/net/cavium/thunder_bgx.h
index e3b862320e..897eca0700 100644
--- a/drivers/net/cavium/thunder_bgx.h
+++ b/drivers/net/cavium/thunder_bgx.h
@@ -194,17 +194,14 @@ void bgx_set_board_info(unsigned int bgx_id, unsigned int mdio_bus,
 
 #undef LINK_INTR_ENABLE
 
-enum bgx_mode {
-	BGX_MODE_SGMII,         /* SGMII, each lane independent */
-	BGX_MODE_XAUI,      /* 1 XAUI or DXAUI, 4 lanes */
-	BGX_MODE_RXAUI,     /* 2 RXAUI, 2 lanes each */
-	BGX_MODE_XFI,       /* 4 XFI, 1 lane each */
-	BGX_MODE_XLAUI,     /* 1 XLAUI, 4 lanes each */
-	BGX_MODE_10G_KR,    /* 4 10GBASE-KR, 1 lane each */
-	BGX_MODE_40G_KR4,   /* 1 40GBASE-KR4, 4 lanes each */
-	BGX_MODE_RGMII = 5,
-	BGX_MODE_QSGMII = 6,
-	BGX_MODE_INVALID = 7,
+enum qlm_mode {
+	QLM_MODE_SGMII,         /* SGMII, each lane independent */
+	QLM_MODE_XAUI,      /* 1 XAUI or DXAUI, 4 lanes */
+	QLM_MODE_RXAUI,     /* 2 RXAUI, 2 lanes each */
+	QLM_MODE_XFI,       /* 4 XFI, 1 lane each */
+	QLM_MODE_XLAUI,     /* 1 XLAUI, 4 lanes each */
+	QLM_MODE_10G_KR,    /* 4 10GBASE-KR, 1 lane each */
+	QLM_MODE_40G_KR4,   /* 1 40GBASE-KR4, 4 lanes each */
 };
 
 struct bgx_board_info {
-- 
2.22.0


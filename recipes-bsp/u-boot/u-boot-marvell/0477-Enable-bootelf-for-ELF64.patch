From 04ece179289a4a4cf423b1ecd14da9efd48fd211 Mon Sep 17 00:00:00 2001
From: Andrew Pinski <apinski@cavium.com>
Date: Sun, 26 Nov 2017 09:55:32 -0800
Subject: [PATCH 0477/1200] Enable bootelf for ELF64.

This patch adds support for ELF64 binaries to bootelf to support
BME.

Signed-off-by: Andrew Pinski <apinski@cavium.com>
---
 cmd/elf.c     | 107 +++++++++++++++++++++++++++++++++++++++++++++++++-
 include/elf.h |  55 ++++++++++++++++++++++++++
 2 files changed, 160 insertions(+), 2 deletions(-)

diff --git a/cmd/elf.c b/cmd/elf.c
index 5b59fc6329..35135bff9d 100644
--- a/cmd/elf.c
+++ b/cmd/elf.c
@@ -27,7 +27,7 @@
  * A very simple elf loader, assumes the image is valid, returns the
  * entry point address.
  */
-static unsigned long load_elf_image_phdr(unsigned long addr)
+static unsigned long load_elf32_image_phdr(unsigned long addr)
 {
 	Elf32_Ehdr *ehdr; /* Elf header structure pointer */
 	Elf32_Phdr *phdr; /* Program header structure pointer */
@@ -54,7 +54,45 @@ static unsigned long load_elf_image_phdr(unsigned long addr)
 	return ehdr->e_entry;
 }
 
-static unsigned long load_elf_image_shdr(unsigned long addr)
+static unsigned long load_elf64_image_phdr(unsigned long addr)
+{
+	Elf64_Ehdr *ehdr; /* Elf header structure pointer */
+	Elf64_Phdr *phdr; /* Program header structure pointer */
+	int i;
+
+	ehdr = (Elf64_Ehdr *)addr;
+	phdr = (Elf64_Phdr *)(addr + ehdr->e_phoff);
+
+	/* Load each program header */
+	for (i = 0; i < ehdr->e_phnum; ++i) {
+		void *dst = (void *)(uintptr_t)phdr->p_paddr;
+		void *src = (void *)addr + phdr->p_offset;
+		debug("Loading phdr %i to 0x%p (%lli bytes)\n",
+		      i, dst, phdr->p_filesz);
+		if (phdr->p_filesz)
+			memcpy(dst, src, phdr->p_filesz);
+		if (phdr->p_filesz != phdr->p_memsz)
+			memset(dst + phdr->p_filesz, 0x00,
+			       phdr->p_memsz - phdr->p_filesz);
+		flush_cache((unsigned long)dst, phdr->p_filesz);
+		++phdr;
+	}
+
+	return ehdr->e_entry;
+}
+
+static unsigned long load_elf_image_phdr(unsigned long addr)
+{
+	char elfclass = ((char*)addr)[EI_CLASS];
+	if (elfclass == ELFCLASS32)
+		return load_elf32_image_phdr(addr);
+	if (elfclass == ELFCLASS64)
+		return load_elf64_image_phdr(addr);
+	return -1;
+  
+}
+
+static unsigned long load_elf32_image_shdr(unsigned long addr)
 {
 	Elf32_Ehdr *ehdr; /* Elf header structure pointer */
 	Elf32_Shdr *shdr; /* Section header structure pointer */
@@ -103,6 +141,65 @@ static unsigned long load_elf_image_shdr(unsigned long addr)
 	return ehdr->e_entry;
 }
 
+static unsigned long load_elf64_image_shdr(unsigned long addr)
+{
+	Elf64_Ehdr *ehdr; /* Elf header structure pointer */
+	Elf64_Shdr *shdr; /* Section header structure pointer */
+	unsigned char *strtab = 0; /* String table pointer */
+	unsigned char *image; /* Binary image pointer */
+	int i; /* Loop counter */
+
+	ehdr = (Elf64_Ehdr *)addr;
+
+	/* Find the section header string table for output info */
+	shdr = (Elf64_Shdr *)(addr + ehdr->e_shoff +
+			     (ehdr->e_shstrndx * sizeof(Elf64_Shdr)));
+
+	if (shdr->sh_type == SHT_STRTAB)
+		strtab = (unsigned char *)(addr + shdr->sh_offset);
+
+	/* Load each appropriate section */
+	for (i = 0; i < ehdr->e_shnum; ++i) {
+		shdr = (Elf64_Shdr *)(addr + ehdr->e_shoff +
+				     (i * sizeof(Elf64_Shdr)));
+
+		if (!(shdr->sh_flags & SHF_ALLOC) ||
+		    shdr->sh_addr == 0 || shdr->sh_size == 0) {
+			continue;
+		}
+
+		if (strtab) {
+			debug("%sing %s @ 0x%08lx (%ld bytes)\n",
+			      (shdr->sh_type == SHT_NOBITS) ? "Clear" : "Load",
+			       &strtab[shdr->sh_name],
+			       (unsigned long)shdr->sh_addr,
+			       (long)shdr->sh_size);
+		}
+
+		if (shdr->sh_type == SHT_NOBITS) {
+			memset((void *)(uintptr_t)shdr->sh_addr, 0,
+			       shdr->sh_size);
+		} else {
+			image = (unsigned char *)addr + shdr->sh_offset;
+			memcpy((void *)(uintptr_t)shdr->sh_addr,
+			       (const void *)image, shdr->sh_size);
+		}
+		flush_cache(shdr->sh_addr, shdr->sh_size);
+	}
+
+	return ehdr->e_entry;
+}
+
+static unsigned long load_elf_image_shdr(unsigned long addr)
+{
+	char elfclass = ((char*)addr)[EI_CLASS];
+	if (elfclass == ELFCLASS32)
+		return load_elf32_image_shdr(addr);
+	if (elfclass == ELFCLASS64)
+		return load_elf64_image_shdr(addr);
+	return -1;
+}
+  
 /* Allow ports to override the default behavior */
 static unsigned long do_bootelf_exec(ulong (*entry)(int, char * const[]),
 				     int argc, char * const argv[])
@@ -176,6 +273,9 @@ int do_bootelf(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 	else
 		addr = load_elf_image_shdr(addr);
 
+	if (addr == -1)
+		return 1;
+
 	if (ep && !strcmp(ep, "no"))
 		return rcode;
 
@@ -365,6 +465,9 @@ int do_bootvx(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 	else
 		puts("## Not an ELF image, assuming binary\n");
 
+	if (addr == -1)
+		return 1;
+
 	printf("## Starting vxWorks at 0x%08lx ...\n", addr);
 
 	dcache_disable();
diff --git a/include/elf.h b/include/elf.h
index fe2128f378..04572d0821 100644
--- a/include/elf.h
+++ b/include/elf.h
@@ -114,6 +114,24 @@ typedef struct elfhdr{
 					   header string table" entry offset */
 } Elf32_Ehdr;
 
+
+typedef struct elf64hdr {
+	unsigned char e_ident[EI_NIDENT];
+	Elf64_Half    e_type;
+	Elf64_Half    e_machine;
+	Elf64_Word    e_version;
+	Elf64_Addr    e_entry;
+	Elf64_Off     e_phoff;
+	Elf64_Off     e_shoff;
+	Elf64_Word    e_flags;
+	Elf64_Half    e_ehsize;
+	Elf64_Half    e_phentsize;
+	Elf64_Half    e_phnum;
+	Elf64_Half    e_shentsize;
+	Elf64_Half    e_shnum;
+	Elf64_Half    e_shstrndx;
+} Elf64_Ehdr;
+
 /* e_type */
 #define ET_NONE		0		/* No file type */
 #define ET_REL		1		/* relocatable file */
@@ -231,6 +249,21 @@ typedef struct {
 	Elf32_Word	sh_entsize;	/* section entry size */
 } Elf32_Shdr;
 
+
+typedef struct {
+	Elf64_Word    sh_name;
+	Elf64_Word    sh_type;
+	Elf64_Xword   sh_flags;
+	Elf64_Addr    sh_addr;
+	Elf64_Off     sh_offset;
+	Elf64_Xword   sh_size;
+	Elf64_Word    sh_link;
+	Elf64_Word    sh_info;
+	Elf64_Xword   sh_addralign;
+	Elf64_Xword   sh_entsize;
+} Elf64_Shdr;
+
+
 /* Special Section Indexes */
 #define SHN_UNDEF	0		/* undefined */
 #define SHN_LORESERVE	0xff00		/* lower bounds of reserved indexes */
@@ -336,6 +369,16 @@ typedef struct elf32_sym {
 	Elf32_Half	st_shndx;	/* section header index */
 } Elf32_Sym;
 
+typedef struct {
+	Elf64_Word    st_name;
+	unsigned char st_info;
+	unsigned char st_other;
+	Elf64_Half    st_shndx;
+	Elf64_Addr    st_value;
+	Elf64_Xword   st_size;
+} Elf64_Sym;
+
+
 /* Symbol table index */
 #define STN_UNDEF	0		/* undefined */
 
@@ -418,6 +461,18 @@ typedef struct {
 	Elf32_Word	p_align;	/* memory alignment */
 } Elf32_Phdr;
 
+typedef struct {
+	Elf64_Word    p_type;
+	Elf64_Word    p_flags;
+	Elf64_Off     p_offset;
+	Elf64_Addr    p_vaddr;
+	Elf64_Addr    p_paddr;
+	Elf64_Xword   p_filesz;
+	Elf64_Xword   p_memsz;
+	Elf64_Xword   p_align;
+} Elf64_Phdr;
+
+
 /* Segment types - p_type */
 #define PT_NULL		0		/* unused */
 #define PT_LOAD		1		/* loadable segment */
-- 
2.22.0


From 06b769350b00c143158be38c89272732ab9e539a Mon Sep 17 00:00:00 2001
From: Ken Ma <make@marvell.com>
Date: Fri, 12 May 2017 10:55:56 +0800
Subject: [PATCH 0721/1200] phy: marvell: a3700: align comphy lane number in
 dts/driver with func spec

In current u-boot dts and comphy driver, lane0 is for PCIe/SGMII0 and
lane1 is for USB3/SGMII1 which opposites the A3700 spec.
This patch aligns lane number with the spec - lane0 is for USB3/SGMII1
and lane1 is for PCIe/SGMII0.
Please note that the generic API comphy_mux_init takes it for granted
that lanes' mux bits in selector base register are ordered by lane
number, but for a3700 lane1 mux bits is before lane0, this patch
re-orders serdes map and mux data and passes them to the API.

Change-Id: Iec744792a264f532cfb30b8a718286702502dbfa
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/54457
Reviewed-by: Igal Liberman <igall@marvell.com>
Tested-by: Igal Liberman <igall@marvell.com>
---
 arch/arm/dts/armada-3720-db.dts          |  8 +-
 arch/arm/dts/armada-3720-espressobin.dts |  8 +-
 drivers/phy/marvell/comphy_a3700.c       | 99 ++++++++++++++++++++++--
 drivers/phy/marvell/comphy_a3700.h       | 11 ++-
 4 files changed, 108 insertions(+), 18 deletions(-)

diff --git a/arch/arm/dts/armada-3720-db.dts b/arch/arm/dts/armada-3720-db.dts
index 5bcf06c878..37053cb3ee 100644
--- a/arch/arm/dts/armada-3720-db.dts
+++ b/arch/arm/dts/armada-3720-db.dts
@@ -102,13 +102,13 @@
 
 &comphy {
 	phy0 {
-		phy-type = <COMPHY_TYPE_PEX0>;
-		phy-speed = <COMPHY_SPEED_2_5G>;
+		phy-type = <COMPHY_TYPE_USB3>;
+		phy-speed = <COMPHY_SPEED_5G>;
 	};
 
 	phy1 {
-		phy-type = <COMPHY_TYPE_USB3>;
-		phy-speed = <COMPHY_SPEED_5G>;
+		phy-type = <COMPHY_TYPE_PEX0>;
+		phy-speed = <COMPHY_SPEED_2_5G>;
 	};
 
 	phy2 {
diff --git a/arch/arm/dts/armada-3720-espressobin.dts b/arch/arm/dts/armada-3720-espressobin.dts
index 650b811daa..53e96889e0 100644
--- a/arch/arm/dts/armada-3720-espressobin.dts
+++ b/arch/arm/dts/armada-3720-espressobin.dts
@@ -72,13 +72,13 @@
 &comphy {
 	max-lanes = <3>;
 	phy0 {
-		phy-type = <COMPHY_TYPE_PEX0>;
-		phy-speed = <COMPHY_SPEED_2_5G>;
+		phy-type = <COMPHY_TYPE_USB3>;
+		phy-speed = <COMPHY_SPEED_5G>;
 	};
 
 	phy1 {
-		phy-type = <COMPHY_TYPE_USB3>;
-		phy-speed = <COMPHY_SPEED_5G>;
+		phy-type = <COMPHY_TYPE_PEX0>;
+		phy-speed = <COMPHY_SPEED_2_5G>;
 	};
 
 	phy2 {
diff --git a/drivers/phy/marvell/comphy_a3700.c b/drivers/phy/marvell/comphy_a3700.c
index f93ff6c8fe..6dd58548b5 100644
--- a/drivers/phy/marvell/comphy_a3700.c
+++ b/drivers/phy/marvell/comphy_a3700.c
@@ -14,17 +14,42 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
+#define A3700_LANE_MAX_NUM	3
+
 struct sgmii_phy_init_data_fix {
 	u16 addr;
 	u16 value;
 };
 
+/*
+ * In PHY mux initialization, comphy_mux_init() takes it for granted that
+ * lanes' phy select bits in selector base register are ordered by lane number;
+ * but for a3700, lane1 phy select bit is before lane0 in selector base
+ * register as below, so it requires the mapping from the nominal lane index
+ * defined in FS to the actual lane index by PHY Selector register order.
+ *
+ * RD00183FCh (00000011h) - PHY Selector
+ *      bit 0: PCIE_GBE0_SEL -PHY Lane 1 Mode Select, 0h: GbE0 1h: PCIe
+ *      bit 4: USB_GBE1_SEL -PHY Lane 0 Mode Select, 0h: GbE1 1h: USB
+ *      bit 8: USB_SATA_SEL -PHY Lane 2 Mode Select, 0h: SATA 1h: USB
+ */
+struct a3700_comphy_lane_mux_map {
+	u32 lane_num;		/* the nominal lane index defined in FS  */
+	u32 phy_select_num;	/* the actual lane index in PHY Selector Reg */
+};
+
+struct a3700_comphy_lane_mux_map lane_mux_map[A3700_LANE_MAX_NUM] = {
+/* Lane 0 */ {0, 1},
+/* Lane 1 */ {1, 0},
+/* Lane 2 */ {2, 2}
+};
+
 struct comphy_mux_data a3700_comphy_mux_data[] = {
-/* Lane 0 */ {3, {{COMPHY_TYPE_UNCONNECTED, 0x0}, {COMPHY_TYPE_SGMII0, 0x0},
-			{COMPHY_TYPE_PEX0, 0x1} } },
-/* Lane 1 */ {4, {{COMPHY_TYPE_UNCONNECTED, 0x0}, {COMPHY_TYPE_SGMII1, 0x0},
-			{COMPHY_TYPE_USB3_HOST0, 0x1},
+/* Lane 0 */ {5, {{COMPHY_TYPE_UNCONNECTED, 0x0}, {COMPHY_TYPE_SGMII1, 0x0},
+			{COMPHY_TYPE_USB3, 0x1}, {COMPHY_TYPE_USB3_HOST0, 0x1},
 			{COMPHY_TYPE_USB3_DEVICE, 0x1} } },
+/* Lane 1 */ {3, {{COMPHY_TYPE_UNCONNECTED, 0x0}, {COMPHY_TYPE_SGMII0, 0x0},
+			{COMPHY_TYPE_PEX0, 0x1} } },
 /* Lane 2 */ {4, {{COMPHY_TYPE_UNCONNECTED, 0x0}, {COMPHY_TYPE_SATA0, 0x0} } },
 };
 
@@ -912,6 +937,64 @@ void comphy_dedicated_phys_init(void)
 	debug_exit();
 }
 
+static int comphy_a3700_get_phy_select_num(u32 lane_num, u32 *phy_select_num)
+{
+	u32 i;
+
+	for (i = 0; i < A3700_LANE_MAX_NUM; i++) {
+		if (lane_num == lane_mux_map[i].lane_num) {
+			*phy_select_num = lane_mux_map[i].phy_select_num;
+			return 0;
+		}
+	}
+
+	debug("No lane %d in the lane mux map table!\n", lane_num);
+	return 1;
+}
+
+static void comphy_a3700_mux_init(struct chip_serdes_phy_config *chip_cfg,
+				  struct comphy_map *serdes_map)
+{
+	u32 lane, phy_select_num;
+	u32 comphy_max_count = chip_cfg->comphy_lanes_count;
+	struct comphy_mux_data ordered_mux_data[A3700_LANE_MAX_NUM];
+	struct comphy_map ordered_serdes_map[A3700_LANE_MAX_NUM];
+
+	debug_enter();
+
+	/*
+	 * In PHY mux initialization, comphy_mux_init() takes it for granted
+	 * that lanes' phy select bits in selector base register are ordered by
+	 * lane number; but for a3700, lane1 phy select bit is before lane0 in
+	 * selector base register as below, so mux data and serdes map need
+	 * to be re-ordered to align with the lane index order in PHY Selector
+	 * register.
+	 *
+	 * RD00183FCh (00000011h) - PHY Selector
+	 *      bit 0: PCIE_GBE0_SEL -PHY Lane 1 Mode Select, 0h: GbE0 1h: PCIe
+	 *      bit 4: USB_GBE1_SEL -PHY Lane 0 Mode Select, 0h: GbE1 1h: USB
+	 *      bit 8: USB_SATA_SEL -PHY Lane 2 Mode Select, 0h: SATA 1h: USB
+	 */
+	memset(ordered_mux_data, 0, sizeof(ordered_mux_data));
+	memset(ordered_serdes_map, 0, sizeof(ordered_serdes_map));
+	for (lane = 0; lane < comphy_max_count; lane++) {
+		if (comphy_a3700_get_phy_select_num(lane, &phy_select_num))
+			return;
+		memcpy(&ordered_mux_data[phy_select_num],
+		       &a3700_comphy_mux_data[lane],
+		       sizeof(struct comphy_mux_data));
+		memcpy(&ordered_serdes_map[phy_select_num],
+		       serdes_map + lane,
+		       sizeof(struct comphy_map));
+	}
+
+	chip_cfg->mux_data = ordered_mux_data;
+	comphy_mux_init(chip_cfg, ordered_serdes_map,
+			(void __iomem *)COMPHY_SEL_ADDR);
+
+	debug_exit();
+}
+
 int comphy_a3700_init(struct chip_serdes_phy_config *chip_cfg,
 		      struct comphy_map *serdes_map)
 {
@@ -921,9 +1004,13 @@ int comphy_a3700_init(struct chip_serdes_phy_config *chip_cfg,
 
 	debug_enter();
 
+	if (comphy_max_count > A3700_LANE_MAX_NUM) {
+		printf("Comphy number %d is too large\n", comphy_max_count);
+		return 1;
+	}
+
 	/* PHY mux initialize */
-	chip_cfg->mux_data = a3700_comphy_mux_data;
-	comphy_mux_init(chip_cfg, serdes_map, (void __iomem *)COMPHY_SEL_ADDR);
+	comphy_a3700_mux_init(chip_cfg, serdes_map);
 
 	for (lane = 0, comphy_map = serdes_map; lane < comphy_max_count;
 	     lane++, comphy_map++) {
diff --git a/drivers/phy/marvell/comphy_a3700.h b/drivers/phy/marvell/comphy_a3700.h
index 7c7bd329e0..9a4d160a44 100644
--- a/drivers/phy/marvell/comphy_a3700.h
+++ b/drivers/phy/marvell/comphy_a3700.h
@@ -21,9 +21,11 @@
  * COMPHY SB definitions
  */
 #define COMPHY_SEL_ADDR			MVEBU_REG(0x0183FC)
-#define rf_compy_select(lane)		(0x1 << (((lane) == 1) ? 4 : 0))
+#define rf_compy_select(lane)		(0x1 << ((lane) <= 1 ? (1 - (lane)) : \
+						 (lane)) * 4)
 
-#define COMPHY_PHY_CFG1_ADDR(lane)	MVEBU_REG(0x018300 + (lane) * 0x28)
+#define COMPHY_PHY_CFG1_ADDR(lane)	MVEBU_REG(0x018300 + \
+						  (1 - (lane)) * 0x28)
 #define rb_pin_pu_iveref		BIT(1)
 #define rb_pin_reset_core		BIT(11)
 #define rb_pin_reset_comphy		BIT(12)
@@ -37,7 +39,8 @@
 #define rf_gen_tx_select		(0x0F << rf_gen_tx_sel_shift)
 #define rb_phy_rx_init			BIT(30)
 
-#define COMPHY_PHY_STAT1_ADDR(lane)	MVEBU_REG(0x018318 + (lane) * 0x28)
+#define COMPHY_PHY_STAT1_ADDR(lane)	MVEBU_REG(0x018318 + \
+						  (1 - (lane)) * 0x28)
 #define rb_rx_init_done			BIT(0)
 #define rb_pll_ready_rx			BIT(2)
 #define rb_pll_ready_tx			BIT(3)
@@ -59,7 +62,7 @@
 #define USB32_CTRL_BASE			MVEBU_REG(0x05D800)
 #define USB3PHY_SHFT			2
 
-#define SGMIIPHY_BASE(l)	(l == 1 ? USB3PHY_BASE : PCIEPHY_BASE)
+#define SGMIIPHY_BASE(l)	(l == 1 ? PCIEPHY_BASE : USB3PHY_BASE)
 #define SGMIIPHY_ADDR(l, a)	(((a & 0x00007FF) * 2) | SGMIIPHY_BASE(l))
 
 #define phy_read16(l, a)	read16((void __iomem *)SGMIIPHY_ADDR(l, a))
-- 
2.22.0


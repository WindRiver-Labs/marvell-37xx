From 0cf7dd08be79ecdf2c6bba4a16ada2b45def1178 Mon Sep 17 00:00:00 2001
From: Grzegorz Jaszczyk <jaz@semihalf.com>
Date: Mon, 14 May 2018 12:26:07 +0200
Subject: [PATCH 0744/1200] mvebu: a8k: use smc call for obtaining memory size

The memory controller registers are going to be marked as secure in
firmware, therefore desired runtime service in fw was implemented to
allow obtaining the real ddr size. Take advantage of it and determine
memory size by using appropriate smc call.

This patch also increases dram banks number to 2 since a8k dram size is
up to 4GB and the first dram bank size is limited to 3GB due because
internal registers' address start from 3GB.

Change-Id: Ib8d57bbe2c4dcfa69ee16525f48fce3f879caec6
Signed-off-by: Grzegorz Jaszczyk <jaz@semihalf.com>
Signed-off-by: Ken Ma <make@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/56245
Reviewed-by: Igal Liberman <igall@marvell.com>
Tested-by: Igal Liberman <igall@marvell.com>
---
 arch/arm/mach-mvebu/armada8k/cpu.c | 54 ++++++++++++++++++++++++++++++
 include/configs/mvebu_armada-8k.h  |  2 +-
 2 files changed, 55 insertions(+), 1 deletion(-)

diff --git a/arch/arm/mach-mvebu/armada8k/cpu.c b/arch/arm/mach-mvebu/armada8k/cpu.c
index abaddc72f4..782cf7ec59 100644
--- a/arch/arm/mach-mvebu/armada8k/cpu.c
+++ b/arch/arm/mach-mvebu/armada8k/cpu.c
@@ -11,6 +11,7 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/arch/cpu.h>
+#include <linux/sizes.h>
 #include <asm/arch/soc.h>
 #include <asm/armv8/mmu.h>
 #include <mach/soc.h>
@@ -22,6 +23,9 @@ DECLARE_GLOBAL_DATA_PTR;
 #define RFU_GLOBAL_SW_RST		(MVEBU_RFU_BASE + 0x84)
 #define RFU_SW_RESET_OFFSET		0
 
+/* Firmware related definition used for SMC calls */
+#define MV_SIP_DRAM_SIZE		0x82000010
+
 /*
  * The following table includes all memory regions for Armada 7k and
  * 8k SoCs. The Armada 7k is missing the CP110 slave regions here. Lets
@@ -137,3 +141,53 @@ int print_cpuinfo(void)
 	return 0;
 }
 #endif
+
+static u64 mvebu_dram_scan_ap_sz(void)
+{
+	struct pt_regs pregs = {0};
+
+	pregs.regs[0] = MV_SIP_DRAM_SIZE;
+	pregs.regs[1] = (unsigned long)SOC_REGS_PHY_BASE;
+
+	smc_call(&pregs);
+
+	if (!pregs.regs[0])
+		pr_err("Failed to get ddr size\n");
+
+	return pregs.regs[0];
+}
+
+int mvebu_dram_init(void)
+{
+	gd->ram_size = mvebu_dram_scan_ap_sz();
+
+	/* if DRAM size == 0, print error message */
+	if (gd->ram_size == 0) {
+		pr_err("DRAM size not initialized - check DRAM configuration\n");
+		printf("\n Using temporary DRAM size of 256MB.\n\n");
+		gd->ram_size = SZ_256M;
+	}
+
+	return 0;
+}
+
+int mvebu_dram_init_banksize(void)
+{
+	/*
+	 * Config 2 DRAM banks:
+	 * Bank 0 - max size 4G - 1G
+	 * Bank 1 - ram size - 4G + 1G
+	 */
+	gd->bd->bi_dram[0].start = CONFIG_SYS_SDRAM_BASE;
+	if (gd->ram_size <= SZ_4G - SZ_1G) {
+		gd->bd->bi_dram[0].size = min(gd->ram_size,
+					      (phys_size_t)(SZ_4G - SZ_1G));
+		return 0;
+	}
+
+	gd->bd->bi_dram[0].size = SZ_4G - SZ_1G;
+	gd->bd->bi_dram[1].start = SZ_4G;
+	gd->bd->bi_dram[1].size = gd->ram_size - SZ_4G + SZ_1G;
+
+	return 0;
+}
diff --git a/include/configs/mvebu_armada-8k.h b/include/configs/mvebu_armada-8k.h
index 56d4c3f968..7ce32b3080 100644
--- a/include/configs/mvebu_armada-8k.h
+++ b/include/configs/mvebu_armada-8k.h
@@ -17,7 +17,7 @@
  */
 #define CONFIG_SYS_TCLK		250000000	/* 250MHz */
 
-#define CONFIG_NR_DRAM_BANKS	1
+#define CONFIG_NR_DRAM_BANKS	2
 
 #define CONFIG_BOARD_EARLY_INIT_R
 
-- 
2.22.0


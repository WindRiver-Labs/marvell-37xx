From 8885b60bf2c207cf39c8f26c1c047c6e1454570c Mon Sep 17 00:00:00 2001
From: zachary zhang <zhangzg@marvell.com>
Date: Wed, 9 Aug 2017 18:17:03 +0800
Subject: [PATCH 0745/1200] efuse: a38x: add DM and dts support for efuse
 driver

Efuse feature is fixed with hardcoded for a38x efuse, which is not
flexible for different mvebu SoC chips.
This patch adds driver model and dts for efuse driver and efuse
dts node in dtsi file and enables it on dts file.
Besides, it removes those older mvebu fuse codes.

Change-Id: I745ee5b3c4c5201671744d480585c59aaf6be81a
Signed-off-by: zachary zhang <zhangzg@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/54568
Reviewed-by: Igal Liberman <igall@marvell.com>
Tested-by: Igal Liberman <igall@marvell.com>
---
 arch/arm/dts/armada-388-gp.dts                |   5 +
 arch/arm/dts/armada-38x.dtsi                  |   8 +
 arch/arm/mach-mvebu/Makefile                  |   1 -
 arch/arm/mach-mvebu/cpu.c                     |  21 +++
 arch/arm/mach-mvebu/include/mach/efuse.h      |  69 -------
 configs/db-88f6820-gp_defconfig               |   2 +
 drivers/Kconfig                               |   2 +
 drivers/Makefile                              |   1 +
 drivers/fuse/Kconfig                          |  26 +++
 drivers/fuse/Makefile                         |   1 +
 .../efuse.c => drivers/fuse/fuse-mvebu.c      | 170 ++++++++++--------
 drivers/fuse/fuse-mvebu.h                     |  36 ++++
 12 files changed, 196 insertions(+), 146 deletions(-)
 delete mode 100644 arch/arm/mach-mvebu/include/mach/efuse.h
 create mode 100644 drivers/fuse/Kconfig
 create mode 100644 drivers/fuse/Makefile
 rename arch/arm/mach-mvebu/efuse.c => drivers/fuse/fuse-mvebu.c (54%)
 create mode 100644 drivers/fuse/fuse-mvebu.h

diff --git a/arch/arm/dts/armada-388-gp.dts b/arch/arm/dts/armada-388-gp.dts
index 7bc878f5a9..63b6a5f547 100644
--- a/arch/arm/dts/armada-388-gp.dts
+++ b/arch/arm/dts/armada-388-gp.dts
@@ -232,6 +232,11 @@
 				vcc-supply = <&reg_usb3_vbus>;
 				status = "okay";
 			};
+
+			efuse@f9000 {
+				status = "okay";
+			};
+
 		};
 
 		pcie-controller {
diff --git a/arch/arm/dts/armada-38x.dtsi b/arch/arm/dts/armada-38x.dtsi
index 5e5a158551..b503a7ae79 100644
--- a/arch/arm/dts/armada-38x.dtsi
+++ b/arch/arm/dts/armada-38x.dtsi
@@ -594,6 +594,14 @@
 				clocks = <&gateclk 10>;
 				status = "disabled";
 			};
+
+			efuse: efuse@f9000 {
+				compatible = "marvell,a38x-efuse";
+				reg = <0xe4008 0x4>;
+				otp-mem = <0xf60f9000>;
+				rows-count = <64>;
+				status = "disabled";
+			};
 		};
 	};
 
diff --git a/arch/arm/mach-mvebu/Makefile b/arch/arm/mach-mvebu/Makefile
index 7f0d69287c..081256ab1c 100644
--- a/arch/arm/mach-mvebu/Makefile
+++ b/arch/arm/mach-mvebu/Makefile
@@ -26,7 +26,6 @@ ifndef CONFIG_SPL_BUILD
 obj-$(CONFIG_ARMADA_375) += ../../../drivers/ddr/marvell/axp/xor.o
 obj-$(CONFIG_ARMADA_38X) += ../../../drivers/ddr/marvell/a38x/xor.o
 obj-$(CONFIG_ARMADA_XP) += ../../../drivers/ddr/marvell/axp/xor.o
-obj-$(CONFIG_MVEBU_EFUSE) += efuse.o
 endif # CONFIG_SPL_BUILD
 obj-y	+= gpio.o
 obj-y	+= mbus.o
diff --git a/arch/arm/mach-mvebu/cpu.c b/arch/arm/mach-mvebu/cpu.c
index 7c64a68388..da210f3289 100644
--- a/arch/arm/mach-mvebu/cpu.c
+++ b/arch/arm/mach-mvebu/cpu.c
@@ -5,6 +5,7 @@
  */
 
 #include <common.h>
+#include <dm.h>
 #include <ahci.h>
 #include <linux/mbus.h>
 #include <asm/io.h>
@@ -642,3 +643,23 @@ void v7_outer_cache_disable(void)
 
 	clrbits_le32(&pl310->pl310_ctrl, L2X0_CTRL_EN);
 }
+
+int arch_early_init_r(void)
+{
+	struct udevice *dev;
+	int ret;
+	int i;
+
+	/* Loop over all MISC uclass drivers */
+	i = 0;
+	while (1) {
+		/* Call relevant driver code via the MISC uclass driver */
+		ret = uclass_get_device(UCLASS_MISC, i++, &dev);
+
+		/* We're done, once no further MISC device node is found */
+		if (ret)
+			break;
+	}
+
+	return 0;
+}
diff --git a/arch/arm/mach-mvebu/include/mach/efuse.h b/arch/arm/mach-mvebu/include/mach/efuse.h
deleted file mode 100644
index ef693e6749..0000000000
--- a/arch/arm/mach-mvebu/include/mach/efuse.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Copyright (C) 2015 Reinhard Pfau <reinhard.pfau@gdsys.cc>
- *
- * SPDX-License-Identifier:	GPL-2.0+
- */
-
-#ifndef _MVEBU_EFUSE_H
-#define _MVEBU_EFUSE_H
-
-#include <common.h>
-
-struct efuse_val {
-	union {
-		struct {
-			u8 d[8];
-		} bytes;
-		struct {
-			u16 d[4];
-		} words;
-		struct {
-			u32 d[2];
-		} dwords;
-	};
-	u32 lock;
-};
-
-#if defined(CONFIG_ARMADA_38X)
-
-enum efuse_line {
-	EFUSE_LINE_SECURE_BOOT = 24,
-	EFUSE_LINE_PUBKEY_DIGEST_0 = 26,
-	EFUSE_LINE_PUBKEY_DIGEST_1 = 27,
-	EFUSE_LINE_PUBKEY_DIGEST_2 = 28,
-	EFUSE_LINE_PUBKEY_DIGEST_3 = 29,
-	EFUSE_LINE_PUBKEY_DIGEST_4 = 30,
-	EFUSE_LINE_CSK_0_VALID = 31,
-	EFUSE_LINE_CSK_1_VALID = 32,
-	EFUSE_LINE_CSK_2_VALID = 33,
-	EFUSE_LINE_CSK_3_VALID = 34,
-	EFUSE_LINE_CSK_4_VALID = 35,
-	EFUSE_LINE_CSK_5_VALID = 36,
-	EFUSE_LINE_CSK_6_VALID = 37,
-	EFUSE_LINE_CSK_7_VALID = 38,
-	EFUSE_LINE_CSK_8_VALID = 39,
-	EFUSE_LINE_CSK_9_VALID = 40,
-	EFUSE_LINE_CSK_10_VALID = 41,
-	EFUSE_LINE_CSK_11_VALID = 42,
-	EFUSE_LINE_CSK_12_VALID = 43,
-	EFUSE_LINE_CSK_13_VALID = 44,
-	EFUSE_LINE_CSK_14_VALID = 45,
-	EFUSE_LINE_CSK_15_VALID = 46,
-	EFUSE_LINE_FLASH_ID = 47,
-	EFUSE_LINE_BOX_ID = 48,
-
-	EFUSE_LINE_MIN = 0,
-	EFUSE_LINE_MAX = 63,
-};
-
-#endif
-
-int mvebu_efuse_init_hw(void);
-
-int mvebu_read_efuse(int nr, struct efuse_val *val);
-
-int mvebu_write_efuse(int nr, struct efuse_val *val);
-
-int mvebu_lock_efuse(int nr);
-
-#endif
diff --git a/configs/db-88f6820-gp_defconfig b/configs/db-88f6820-gp_defconfig
index 52902bcb98..6863124c07 100644
--- a/configs/db-88f6820-gp_defconfig
+++ b/configs/db-88f6820-gp_defconfig
@@ -15,6 +15,7 @@ CONFIG_SYS_PROMPT="Marvell>> "
 CONFIG_SYS_CONSOLE_INFO_QUIET=y
 # CONFIG_DISPLAY_BOARDINFO is not set
 CONFIG_SPL=y
+CONFIG_ARCH_EARLY_INIT_R=y
 CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_PARTITION=y
 CONFIG_SPL_I2C_SUPPORT=y
 # CONFIG_CMD_FLASH is not set
@@ -41,6 +42,7 @@ CONFIG_EFI_PARTITION=y
 CONFIG_ENV_IS_IN_SPI_FLASH=y
 CONFIG_SPL_OF_TRANSLATE=y
 CONFIG_SCSI_AHCI=y
+CONFIG_MISC=y
 CONFIG_MMC_SDHCI=y
 CONFIG_MMC_SDHCI_SDMA=y
 CONFIG_MMC_SDHCI_MV=y
diff --git a/drivers/Kconfig b/drivers/Kconfig
index e34f85bc90..5bb8aa5662 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -32,6 +32,8 @@ source "drivers/firmware/Kconfig"
 
 source "drivers/fpga/Kconfig"
 
+source "drivers/fuse/Kconfig"
+
 source "drivers/gpio/Kconfig"
 
 source "drivers/i2c/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index 2bba85ce64..e93b009f8d 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -97,6 +97,7 @@ obj-y += memory/
 obj-y += pwm/
 obj-y += reset/
 obj-y += input/
+obj-y += fuse/
 # SOC specific infrastructure drivers.
 obj-y += soc/
 obj-$(CONFIG_REMOTEPROC) += remoteproc/
diff --git a/drivers/fuse/Kconfig b/drivers/fuse/Kconfig
new file mode 100644
index 0000000000..cdd87c7d67
--- /dev/null
+++ b/drivers/fuse/Kconfig
@@ -0,0 +1,26 @@
+#
+# EFUSE infrastructure and drivers
+#
+
+menu "EFUSE Support"
+
+config MVEBU_EFUSE
+	bool "Enable eFuse support"
+	default n
+	depends on HAVE_MVEBU_EFUSE
+	help
+	  This enable mvebu efuse driver.
+	  It supports for reading and writing eFuses.
+	  This efuse driver supports marvell
+	  a38x SoC chips.
+
+config MVEBU_EFUSE_FAKE
+	bool "Fake eFuse access (dry run)"
+	default n
+	depends on MVEBU_EFUSE
+	help
+	  This enables a "dry run" mode where eFuses are not really programmed.
+	  Instead the eFuse accesses are emulated by writing to and reading
+	  from a memory block.
+	  This is can be used for testing prog scripts.
+endmenu
diff --git a/drivers/fuse/Makefile b/drivers/fuse/Makefile
new file mode 100644
index 0000000000..2dfef5fd49
--- /dev/null
+++ b/drivers/fuse/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_MVEBU_EFUSE) += fuse-mvebu.o
\ No newline at end of file
diff --git a/arch/arm/mach-mvebu/efuse.c b/drivers/fuse/fuse-mvebu.c
similarity index 54%
rename from arch/arm/mach-mvebu/efuse.c
rename to drivers/fuse/fuse-mvebu.c
index 67fcadcf60..87f3d67263 100644
--- a/arch/arm/mach-mvebu/efuse.c
+++ b/drivers/fuse/fuse-mvebu.c
@@ -1,7 +1,9 @@
+// SPDX-License-Identifier: GPL-2.0+
 /*
+ * Copyright (C) 2018 Marvell International Ltd.
  * Copyright (C) 2015-2016 Reinhard Pfau <reinhard.pfau@gdsys.cc>
  *
- * SPDX-License-Identifier:	GPL-2.0+
+ * https://spdx.org/licenses
  */
 
 #include <config.h>
@@ -9,9 +11,14 @@
 #include <errno.h>
 #include <asm/io.h>
 #include <asm/arch/cpu.h>
-#include <asm/arch/efuse.h>
 #include <asm/arch/soc.h>
 #include <linux/mbus.h>
+#include <dm/device.h>
+#include <dm.h>
+#include <fdt_support.h>
+#include "fuse-mvebu.h"
+
+DECLARE_GLOBAL_DATA_PTR;
 
 #if defined(CONFIG_MVEBU_EFUSE_FAKE)
 #define DRY_RUN
@@ -19,61 +26,47 @@
 #undef DRY_RUN
 #endif
 
-#define MBUS_EFUSE_BASE 0xF6000000
-#define MBUS_EFUSE_SIZE BIT(20)
-
-#define MVEBU_EFUSE_CONTROL (MVEBU_REGISTER(0xE4008))
+#define MBUS_EFUSE_SIZE		BIT(20)
+#define EFUSE_ROW_REG_WIDTH	16
 
 enum {
 	MVEBU_EFUSE_CTRL_PROGRAM_ENABLE = (1 << 31),
 };
 
-struct mvebu_hd_efuse {
-	u32 bits_31_0;
-	u32 bits_63_32;
-	u32 bit64;
-	u32 reserved0;
+struct mvebu_fuse_block_data {
+	unsigned int	row_num;
+	void	*control_reg;
+	void	*target_otp_mem;
 };
 
-#ifndef DRY_RUN
-static struct mvebu_hd_efuse *efuses =
-	(struct mvebu_hd_efuse *)(MBUS_EFUSE_BASE + 0xF9000);
-#else
-static struct mvebu_hd_efuse efuses[EFUSE_LINE_MAX + 1];
-#endif
-
-static int efuse_initialised;
-
-static struct mvebu_hd_efuse *get_efuse_line(int nr)
-{
-	if (nr < 0 || nr > 63 || !efuse_initialised)
-		return NULL;
-
-	return efuses + nr;
-}
+static struct mvebu_fuse_block_data efuse_data;
 
 static void enable_efuse_program(void)
 {
 #ifndef DRY_RUN
-	setbits_le32(MVEBU_EFUSE_CONTROL, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
+	setbits_le32(efuse_data.control_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
 #endif
 }
 
 static void disable_efuse_program(void)
 {
 #ifndef DRY_RUN
-	clrbits_le32(MVEBU_EFUSE_CONTROL, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
+	clrbits_le32(efuse_data.control_reg, MVEBU_EFUSE_CTRL_PROGRAM_ENABLE);
 #endif
 }
 
-static int do_prog_efuse(struct mvebu_hd_efuse *efuse,
-			 struct efuse_val *new_val, u32 mask0, u32 mask1)
+static int do_prog_efuse(int nr, struct efuse_val *new_val,
+			 u32 mask0, u32 mask1)
 {
 	struct efuse_val val;
+	void __iomem *otp_mem;
+
+	otp_mem = efuse_data.target_otp_mem + EFUSE_ROW_REG_WIDTH * nr;
 
-	val.dwords.d[0] = readl(&efuse->bits_31_0);
-	val.dwords.d[1] = readl(&efuse->bits_63_32);
-	val.lock = readl(&efuse->bit64);
+	/* read efuse row value before burn */
+	val.dwords.d[0] = readl(otp_mem);
+	val.dwords.d[1] = readl(otp_mem + 4);
+	val.lock = readl(otp_mem + 8);
 
 	if (val.lock & 1)
 		return -EPERM;
@@ -82,11 +75,11 @@ static int do_prog_efuse(struct mvebu_hd_efuse *efuse,
 	val.dwords.d[1] |= (new_val->dwords.d[1] & mask1);
 	val.lock |= new_val->lock;
 
-	writel(val.dwords.d[0], &efuse->bits_31_0);
+	writel(val.dwords.d[0], otp_mem);
 	mdelay(1);
-	writel(val.dwords.d[1], &efuse->bits_63_32);
+	writel(val.dwords.d[1], otp_mem + 4);
 	mdelay(1);
-	writel(val.lock, &efuse->bit64);
+	writel(val.lock, otp_mem + 8);
 	mdelay(5);
 
 	return 0;
@@ -94,17 +87,8 @@ static int do_prog_efuse(struct mvebu_hd_efuse *efuse,
 
 static int prog_efuse(int nr, struct efuse_val *new_val, u32 mask0, u32 mask1)
 {
-	struct mvebu_hd_efuse *efuse;
 	int res = 0;
 
-	res = mvebu_efuse_init_hw();
-	if (res)
-		return res;
-
-	efuse = get_efuse_line(nr);
-	if (!efuse)
-		return -ENODEV;
-
 	if (!new_val)
 		return -EINVAL;
 
@@ -121,50 +105,36 @@ static int prog_efuse(int nr, struct efuse_val *new_val, u32 mask0, u32 mask1)
 
 	enable_efuse_program();
 
-	res = do_prog_efuse(efuse, new_val, mask0, mask1);
+	res = do_prog_efuse(nr, new_val, mask0, mask1);
 
 	disable_efuse_program();
 
 	return res;
 }
 
-int mvebu_efuse_init_hw(void)
+int mvebu_efuse_init_hw(unsigned long efuse_base)
 {
 	int ret;
 
-	if (efuse_initialised)
-		return 0;
-
-	ret = mvebu_mbus_add_window_by_id(
-		CPU_TARGET_SATA23_DFX, 0xA, MBUS_EFUSE_BASE, MBUS_EFUSE_SIZE);
+	ret = mvebu_mbus_add_window_by_id(CPU_TARGET_SATA23_DFX,
+					  0xA, efuse_base, MBUS_EFUSE_SIZE);
 
 	if (ret)
 		return ret;
 
-	efuse_initialised = 1;
-
 	return 0;
 }
 
 int mvebu_read_efuse(int nr, struct efuse_val *val)
 {
-	struct mvebu_hd_efuse *efuse;
-	int res;
+	void __iomem *otp_mem;
 
-	res = mvebu_efuse_init_hw();
-	if (res)
-		return res;
+	otp_mem = efuse_data.target_otp_mem + EFUSE_ROW_REG_WIDTH * nr;
 
-	efuse = get_efuse_line(nr);
-	if (!efuse)
-		return -ENODEV;
-
-	if (!val)
-		return -EINVAL;
+	val->dwords.d[0] = readl(otp_mem);
+	val->dwords.d[1] = readl(otp_mem + 4);
+	val->lock = readl(otp_mem + 8);
 
-	val->dwords.d[0] = readl(&efuse->bits_31_0);
-	val->dwords.d[1] = readl(&efuse->bits_63_32);
-	val->lock = readl(&efuse->bit64);
 	return 0;
 }
 
@@ -200,7 +170,8 @@ int fuse_read(u32 bank, u32 word, u32 *val)
 	struct efuse_val fuse_line;
 	int res;
 
-	if (bank < EFUSE_LINE_MIN || bank > EFUSE_LINE_MAX || word > 2)
+	if (bank < 0 || bank >= efuse_data.row_num ||
+	    word > 2)
 		return -EINVAL;
 
 	res = mvebu_read_efuse(bank, &fuse_line);
@@ -218,7 +189,7 @@ int fuse_read(u32 bank, u32 word, u32 *val)
 int fuse_sense(u32 bank, u32 word, u32 *val)
 {
 	/* not supported */
-	return -ENOSYS;
+	return -ESRCH;
 }
 
 int fuse_prog(u32 bank, u32 word, u32 val)
@@ -226,8 +197,6 @@ int fuse_prog(u32 bank, u32 word, u32 val)
 	int res = 0;
 
 	/*
-	 * NOTE: Fuse line should be written as whole.
-	 * So how can we do that with this API?
 	 * For now: remember values for word == 0 and word == 1 and write the
 	 * whole line when word == 2.
 	 * This implies that we always require all 3 fuse prog cmds (one for
@@ -237,7 +206,8 @@ int fuse_prog(u32 bank, u32 word, u32 val)
 	 * Hope that will be OK.
 	 */
 
-	if (bank < EFUSE_LINE_MIN || bank > EFUSE_LINE_MAX || word > 2)
+	if (bank < 0 || bank >= efuse_data.row_num ||
+	    word > 2)
 		return -EINVAL;
 
 	if (word < 2) {
@@ -253,12 +223,60 @@ int fuse_prog(u32 bank, u32 word, u32 val)
 		res = mvebu_write_efuse(bank, &prog_val);
 		valid_prog_words = 0;
 	}
-
 	return res;
 }
 
 int fuse_override(u32 bank, u32 word, u32 val)
 {
 	/* not supported */
-	return -ENOSYS;
+	return -ESRCH;
 }
+
+static int fuse_probe(struct udevice *dev)
+{
+	const void *blob = gd->fdt_blob;
+	int node = dev_of_offset(dev);
+	struct mvebu_fuse_block_data *priv = dev_get_priv(dev);
+	int res = 0;
+	unsigned long efuse_base;
+
+	priv->control_reg = dev_read_addr_ptr(dev);
+	if (IS_ERR(priv->control_reg))
+		return -EINVAL;
+	efuse_data.control_reg = priv->control_reg;
+
+#ifndef DRY_RUN
+	priv->target_otp_mem =
+		(void *)(((unsigned long)fdtdec_get_int(blob, node,
+			"otp-mem", 0)) & 0xffffffff);
+
+#else
+	priv->target_otp_mem = NULL;
+#endif
+	efuse_data.target_otp_mem = priv->target_otp_mem;
+
+	/* efuse mbus window initialization */
+	efuse_base = (unsigned long)priv->target_otp_mem & 0xFF000000;
+	res = mvebu_efuse_init_hw(efuse_base);
+	if (res)
+		return res;
+
+	priv->row_num = fdtdec_get_int(blob, node, "row-count", 0);
+	efuse_data.row_num = priv->row_num;
+
+	return 0;
+}
+
+static const struct udevice_id efuse_ids[] = {
+	{ .compatible = "marvell,a38x-efuse" },
+	{ }
+};
+
+U_BOOT_DRIVER(mvebu_efuse) = {
+	.name	= "mvebu_efuse",
+	.id	= UCLASS_MISC,
+	.of_match = efuse_ids,
+	.probe	= fuse_probe,
+	.priv_auto_alloc_size = sizeof(struct mvebu_fuse_block_data),
+};
+
diff --git a/drivers/fuse/fuse-mvebu.h b/drivers/fuse/fuse-mvebu.h
new file mode 100644
index 0000000000..671f6a06bd
--- /dev/null
+++ b/drivers/fuse/fuse-mvebu.h
@@ -0,0 +1,36 @@
+/* SPDX-License-Identifier: GPL-2.0+
+ * Copyright (C) 2018 Marvell International Ltd.
+ * Copyright (C) 2015-2016 Reinhard Pfau <reinhard.pfau@gdsys.cc>
+ *
+ * https://spdx.org/licenses
+ */
+
+#ifndef _MVEBU_EFUSE_H
+#define _MVEBU_EFUSE_H
+
+#include <common.h>
+
+struct efuse_val {
+	union {
+		struct {
+			u8 d[8];
+		} bytes;
+		struct {
+			u16 d[4];
+		} words;
+		struct {
+			u32 d[2];
+		} dwords;
+	};
+	u32 lock;
+};
+
+int mvebu_efuse_init_hw(unsigned long efuse_base);
+
+int mvebu_read_efuse(int nr, struct efuse_val *val);
+
+int mvebu_write_efuse(int nr, struct efuse_val *val);
+
+int mvebu_lock_efuse(int nr);
+
+#endif
-- 
2.22.0


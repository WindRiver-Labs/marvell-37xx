From a3dc8b67600a93a8acccc114a7b2f934bf836a0e Mon Sep 17 00:00:00 2001
From: Konstantin Porotchkin <kostap@marvell.com>
Date: Sun, 16 Sep 2018 14:37:49 +0300
Subject: [PATCH 0860/1200] doc: mvebu: port Marvell documentation from
 u-boot-2017.03

Copy Marvell u-boot documentation from LSP u-boot-2017.03.
Fix minor syntax issues in trusted_boot.txt, remove unsupported
platforms from build.txt.

Change-Id: Ia000ff7f76ff594adff6bee27b0a7bde34679cfa
Signed-off-by: Konstantin Porotchkin <kostap@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/59889
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Igal Liberman <igall@marvell.com>
---
 doc/mvebu/build.txt        | 163 ++++++++++++
 doc/mvebu/trusted_boot.txt | 519 +++++++++++++++++++++++++++++++++++++
 doc/mvebu/uart_boot.txt    | 115 ++++++++
 doc/mvebu/uboot_cmd.txt    | 384 +++++++++++++++++++++++++++
 4 files changed, 1181 insertions(+)
 create mode 100644 doc/mvebu/build.txt
 create mode 100644 doc/mvebu/trusted_boot.txt
 create mode 100644 doc/mvebu/uart_boot.txt
 create mode 100644 doc/mvebu/uboot_cmd.txt

diff --git a/doc/mvebu/build.txt b/doc/mvebu/build.txt
new file mode 100644
index 0000000000..5c4441d3a7
--- /dev/null
+++ b/doc/mvebu/build.txt
@@ -0,0 +1,163 @@
+U-Boot Build Instructions
+=========================
+
+This document describes how to compile U-Boot and how to change U-Boot
+configuration.
+
+Build Procedure
+----------------
+1. Install required packages::
+
+		# sudo apt-get install libssl-dev
+		# sudo apt-get install device-tree-compiler
+		# sudo apt-get install swig libpython-dev
+
+2. Set the cross compiler::
+
+		# export CROSS_COMPILE=/path/to/toolchain/aarch64-linux-gnu
+
+3. Clean-up old residuals::
+
+		# make mrproper
+
+4. Configure the U-Boot::
+
+		# make <defconfig_file>
+
+   - For the Armada-70x0/80x0 DB board and Armada-7020 AMC use
+     "make mvebu_db_armada8k_defconfig"
+   - For the Armada-80x0 MacchiatoBin use "make mvebu_mcbin-88f8040_defconfig"
+   - For the Armada-3700 DB board use "make mvebu_db-88f3720_defconfig"
+   - For the Armada-3700 EsspressoBin use
+     "make mvebu_espressobin-88f3720_defconfig"
+
+5. Configure the device-tree and build the U-Boot image:
+
+	All device-tree files are located in ./arch/arm/dts/ folder.
+	Information about the different configuration available for the
+	development board is located in:
+
+	- For A37x0: ./doc/mvebu/a3700/armada-3700-db-setup.txt
+	- For A70x0: ./doc/mvebu/a7k-a8k/armada70x0-db-setup.txt
+	- For A80x0: ./doc/mvebu/a7k-a8k/armada80x0-db-setup.txt
+
+	In order to compile u-boot with a specific device-tree,
+	use the following::
+
+		# make DEVICE_TREE=<name>
+
+	- For the Armada-70x0 DB use "make DEVICE_TREE=armada-7040-db[-X]"
+	- For the Armada-7020 AMC use "make DEVICE_TREE=armada-7020-amc"
+	- For the Armada-80x0 DB use "make DEVICE_TREE=armada-8040-db[-X]"
+	- For the Armada-80x0 MacchiatoBin use
+	  "make DEVICE_TREE=armada-8040-mcbin"
+	- For the Armada-37x0 DB use "make DEVICE_TREE=armada-3720-ddrX-db[-X]"
+	- For the Armada-37x0 EsspressoBin use
+	  "make DEVICE_TREE=armada-3720-espressobin"
+	  (X represents possible board configuration)
+
+	The U-Boot compilation generates u-boot.bin - the U-Boot image
+
+	.. Note::
+		The u-boot.bin should not be used as a stand-alone image.
+		The ARM Trusted Firmware (ATF) build process uses this image to
+		generate the flash image.
+
+
+Configuration Update
+---------------------
+To update the U-Boot configuration, refer to doc/README.kconfig
+
+
+Boot Device Selection
+---------------------
+The following options are available:
+	- Boot from SPI boot
+	- Boot from eMMC boot
+
+eMMC Boot Device
+-----------------
+The Armada-3700 and armada-8k support eMMC as the boot device on the target.
+The default boot device on this platform is SPI NOR flash.
+In order to change the boot device to eMMC, set the following parameter
+the default configuration::
+
+	- CONFIG_MVEBU_MMC_BOOT=y
+
+If "menuconfig" is used, navigate to the following location::
+
+	-> Command line interface
+	  -> Misc commands
+	    -> MVEBU commands
+	      -> Flash for image
+
+and select "eMMC flash boot".
+
+The eMMC has 2 boot partitions (BOOT0 and BOOT1) and a user data partition
+(DATA).
+The boot partitions are numbered as partition 1 and 2 in MMC driver.
+Number 0 is used for user data partition and should not be utilized for storing
+boot images and U-Boot environment in RAW mode since it will break file system
+structures usually located here.
+
+The default boot partition is BOOT0. It is selected by the following parameter:
+CONFIG_SYS_MMC_ENV_PART=1
+Valid values for this parameter are 1 for BOOT0 and 2 for BOOT1.
+Never use partition number 0 here!
+
+If select SD card as boot device, the Macro parameter should be::
+
+	#define CONFIG_SYS_MMC_ENV_PART		0
+
+If select eMMC as boot device, the Macro parameter should be::
+
+	#define CONFIG_SYS_MMC_ENV_PART		1
+or::
+
+	#define CONFIG_SYS_MMC_ENV_PART         2
+
+The parameter CONFIG_SYS_MMC_ENV_DEV depends on total number of enabled eMMC
+interfaces on board, the AP interface is enumerated first, then CP interface.
+
+For example on board with eMMC interface on both AP and CP::
+
+If select AP's SD card/eMMC as boot device, the Macro parameter should be::
+
+	#define CONFIG_SYS_MMC_ENV_DEV         0
+
+If select CP's SD card/eMMC as boot device, the Macro parameter should be::
+
+	#define CONFIG_SYS_MMC_ENV_DEV         1
+
+Both parameters can be changed in the "include/configs/mvebu_armada-37xx.h"
+or "include/configs/mvebu_armada-8k.h" depend on the device.
+
+Note that this configuration is only available when "Flash for image"
+selects "eMMC flash boot" device as described above.
+The selected partition will be used by U-Boot "bubt" and "savenv" commands
+for flashing the boot image and saving U-Boot configuration.
+
+
+Boot Device Selection for Armada-8k/7k Build
+--------------------------------------------
+The following options are available for A8K and A7K boot:
+
+	- Boot from SPI NAND
+
+SPI NAND Boot Device
+--------------------
+The Armada-7K and ARMADA-8K supports SPI NAND flash as the boot device on the
+target.
+In order to burn the image and save environment variables to SPI NAND flash,
+please enable SPI NAND driver at first by set the following parameter to <Y>::
+
+	CONFIG_MVEBU_NAND_BOOT=y
+
+If "menuconfig" is used, navigate to the following location::
+
+	-> Command line interface
+	  -> Misc commands
+	    -> MVEBU commands
+	      -> Flash for image
+
+and select "NAND flash boot".
diff --git a/doc/mvebu/trusted_boot.txt b/doc/mvebu/trusted_boot.txt
new file mode 100644
index 0000000000..688ccdf2b7
--- /dev/null
+++ b/doc/mvebu/trusted_boot.txt
@@ -0,0 +1,519 @@
+Trusted Boot (Secure Mode)
+==========================
+
+This document describes how to build/burn and update Secure Trusted image with
+Key generating and updating, assuming that the SoC being used is already
+supported in U-Boot & ATF.
+
+The trusted boot document describes the following components:
+
+- eFuse module - Allows burning boot device, authentication key digest,
+  encryption key, etc.
+- Boot image format - Provides the trusted boot information to BootROM.
+- Work flow - Guide how to build and burn Secure Trusted images to target
+  board.
+- Authentication Keys Generation and selection - Provides method to generate
+  and select authentication keys.
+
+A38x platforms
+~~~~~~~~~~~~~~
+Please refer to Application Note
+- AN-383: ARMADA 38x/39x Families Secure Boot Mode Support
+
+eFuses
+-------
+The eFuse command module and driver provides RW access to SoC eFuses through
+the "efuse" command for A3700 platform or "fuse" command for A7K/8K platform.
+In order to enable this SW component, the following configuration entry should
+be set by using "make menuconfig"::
+
+A8K platforms
+~~~~~~~~~~~~~
+Command Location:
+	-> command line interface
+		-> Device access commands
+			-> fuse
+Driver Location:
+	-> Device Drivers
+		-> EFUSE Support
+
+A3700 platforms
+~~~~~~~~~~~~~~~
+Command Location:
+	-> Command line interface
+		-> MVEBU commands
+			-> efuse
+Driver Location:
+	-> ARM architecture
+		-> MVEBU Common SoC Utilities
+			-> eFuse support
+
+The above configuration enables the eFuse driver and eFuse command module.
+Refer to SoC and BootROM manuals for details about supported eFuses
+and their role in the trusted boot flow.
+Since the eFuse command module and driver are only used for simplified access
+to eFuse HW values, the presence of these components in the final trusted boot
+image is not required.
+
+A8K platforms
+~~~~~~~~~~~~~
+The AES-256 key is visible only during the efuse burn session. It will be hidden
+after reset and accessible only on early boot stages by the internal BootROM
+procedures.
+Trying to read efuse values of AES-256 key will return zeros.
+Note that if the JTAG is permanently enabled in A8K efuse, the AES-256 key
+becomes hidden for everyone, including the BootROM. Therefore when JTAG is
+enabled permanently by eFuse, the boot image should not be encrypted, since
+BootROM decryption will always fail unless a zero-key was used for image
+encryption.
+
+A3700 platforms
+~~~~~~~~~~~~~~~
+The AES-256 KEY can be hidden by setting the "DEV_DEPLOY" bits, these bits are
+set by the customer when deploying their products which will set the chip to
+trusted mode.
+
+Boot Image Format
+-----------------
+The boot image should be properly formatted for the trusted boot mode, so
+the BootROM extracts the required information from the image headers and uses it
+for authentication against eFuse values and digital signatures and for image
+decryption.
+Various platforms use different BootROMs and boot image formats.
+For specific details refer to the SoC functional specification, BootROM manual
+and to the section related to a selected platform below.
+Refer to ATF build documentation for enabling secure image output.
+
+A8K platforms
+~~~~~~~~~~~~~
+Refer to A8K functional specification for details about trusted boot image
+components.
+The secure image configuration is defined by a file sec_img_xx.cfg located in
+ATF folder "tools/doimage/secure". The xx in the configuration file name is
+either 7K or 8K for targeting Armada-80x0 or Aramda-70x0 platform setup
+accordingly.
+The configuration file has a standard INI file format and defines the following
+options:
+
+- kak_key_file - The string containing path to the Keys Authentication Key file
+		in PEM format. This parameter is mandatory.
+
+- csk_key_file	- Array of string containing paths to Code Signing Key files in
+		PEM format. This array has to include at least a single key used
+		for signing the boot image and prolog. The key index is defined
+		by the file location in this array.
+		Empty key paths should be coded as "*" strings to make the
+		entire array size of 16 strings. This parameter is mandatory.
+
+- csk_key_index - The integer value in range of 0 to 15 defining the CSK file
+		from the above array to be used for creating image and prolog
+		signatures.
+		This parameter is optional and if omitted defaults to 0.
+
+- aes_key_file	- The string containing the path to the AES-256 symmetric key
+		file in ASCII text format.
+ 		The boot image will be encrypted if this parameter is included
+		in the configuration or left unencrypted if the parameter is
+		omitted.
+		This parameter is optional.
+
+- efuse_disable - Boolean parameter defining whether to disable access to efuses
+		in secure boot mode or not.
+		Can be either "true" or "false". The efuse access policy is
+		enforced by the BootROM.
+		This parameter is optional and if omitted defaults to "true".
+
+- jtag		- Parameters defining the JTAG behavior in trusted boot mode.
+		There are two parameters enclosed in curly brackets - "enable"
+		and "delay".
+		The "jtag.enable" boolean parameter allows to enable the JTAG
+		support in trusted boot mode (valid values "true" and "false").
+		The second parameter - "jtag.delay" (integer) defines delay
+		in milliseconds the BootROM waits before enabling the JTAG
+		connection in the HW. These parameters are optional and if
+		omitted default to "false" and 0 respectfully.
+
+- box_id	- 4 byte hexadecimal number to be used as box ID.
+		This value will be part of the secure extension in the trusted
+		boot image and should match the value burned in the appropriate
+		efuse field.
+		This parameter is optional and if omitted defaults to 0.
+
+- flash_id	- 4 byte hexadecimal number to be used as the flash ID.
+		This value will be part of the secure extension in trusted boot
+		image and should match the value burned in the appropriate efuse
+		field.
+		This parameter is optional and if omitted defaults to 0.
+
+- control	- Array of hexadecimal addresses to be set on each CP connected
+		to an AP in trusted mode.
+		It is required to add two addresses for each connected CP.
+		The first address points to the CP SecureBootControl register
+		and the second address points to the CP EfuseBurnControl
+		register.
+		Refer to your SoC documentation for details. For instance,
+		Armada-7040 SoC has a single CP connected to AP, so this array
+		has to list 2 register addresses. The Armada-8040 has two CPS
+		connected to AP, so this array has to include 4 register
+		addresses.
+		This parameter is optional.
+
+
+A3700 platforms
+~~~~~~~~~~~~~~~
+Please refer to MARVELL WIRELESS Trusted Platform Tools Packages functional
+specification for details about trusted boot image components.
+The secure image configuration is defined by a single file atf_timN.txt located
+in the build folder. This file will be generated after compilation.
+There are some files in the A3700_utils/tim folder which are used for
+trusted image boot.
+
+- aes-256.txt - This file includes AES-256 encryption key values. This key
+		is used to do Encryption/Decryption on wtmi and obmi images
+		which should be programmed into efuse. it can be updated by the
+		image provider.
+
+- kak.txt - The file including (DSA Algorithm ID/Hash Algorithm ID/Key Size
+		in bits/RSA Public Exponent/RSA System Modulus/RSA Private Key)
+		is used to signature the TIM file, and will generate the OEM key
+		in "otphash.txt" The file is generated by Key Generation command
+		by KeyGeneration.txt file stored in tools/wtp/key folder.
+		This file is mandatory and can be updated according to
+		requirements for updating the Secure Trusted image.
+
+- CSK[0-F].txt	- These files contain different CSK Key information (Hash
+		Algorithm ID/Key Size in bits/Public Key Size in bits/Encrypt
+		Algorithm ID/RSA System Modulus). These files are also generated
+		by the Key Generation command with KeyGeneration.txt by setting
+		different parameters(i.e. Seed...).
+
+- timnsign.txt- This file defines which key is used to signature the TIMH file.
+		Indicate the CSK_INDEX of this file in fuse. All of parameters
+		(DSA Algorithm ID/Hash Algorithm ID/Key Size in bits/RSA Public
+		Exponent/RSA System Modulus/RSA Private Key) in the file should
+		be aligned with one of 16 KEY files in the tools/wtp/key folder.
+		This file is mandatory and and can be updated according to
+		requirements for updating Secure Trusted image.
+
+Work flow - Target Preparation
+------------------------------
+After the trusted boot mode is selected by the SoC eFuse, the BootROM enforces
+security checks upon boot image load. Therefore a right work flow is essential
+for target preparation and preventing the system from self-locking.
+
+A8K platforms
+~~~~~~~~~~~~~
+
+1. Build an image for trusted boot mode using the configuration file described
+   above and any additional settings required by ATF.
+   The image encryption option should not be used in this build, since the
+   resulting image should be compatible with non-trusted systems.
+2. Burn the image on the target board and boot it. The secure header will be
+   bypassed in non-trusted boot mode and the system will start as usual.
+3. Enable eFuse burning in the HW by connecting 1.8V source to AP_VHV, CP0_VHV
+   and CP1_VHV pins.
+   For example on A8K-DB Rev1.4 platform it is done by shortening on-board
+   jumpers JP36 and JP42.
+   Please refer to your Marvell Development Board manual or consult Marvell
+   representative
+   for the details about VHV connection setup on other supported HW platforms.
+4. Burn all required efuses to each efuse rows using "fuse prog" commands.
+   The trusted boot enable efuse should be burned last since any further
+   modifications to the SoC efuses will not be possible afterwards.
+   See the efuse programming example(HD and LD efuse rows) for A8K device below.
+   uboot fuse command::
+
+	/* HD efuse rows(64bits width) programming */
+	/* prog KAK_DIGEST key to efuse */
+	fuse prog -y 25 0 <KAK_DIGEST bit 31-0>    <KAK_DIGEST bit 55-32>   0x1
+	fuse prog -y 26 0 <KAK_DIGEST bit 95-56>   <KAK_DIGEST bit 111-96>  0x1
+	fuse prog -y 27 0 <KAK_DIGEST bit 143-112> <KAK_DIGEST bit 167-144> 0x1
+	fuse prog -y 28 0 <KAK_DIGEST bit 199-168> <KAK_DIGEST bit 223-200> 0x1
+	fuse prog -y 29 0 <KAK_DIGEST bit 255-224> 0x0 0x1
+
+	For example:
+	KAK key hash
+	8B3732C8F03D0C407F34200C206CA36B0701E47C9074034EDE97FBFF5BA6D778
+	fuse prog -y 25 0 0xC832378B 0x000C3DF0 0x1
+	fuse prog -y 26 0 0x20347F40 0x006C200C 0x1
+	fuse prog -y 27 0 0x01076BA3 0x00907CE4 0x1
+	fuse prog -y 28 0 0xDE4E0374 0x00FFFB97 0x1
+	fuse prog -y 29 0 0x78D7A65B 0x0 0x1
+
+	/* prog AES key to efuse */
+	fuse prog -y 32 0 <AES_KEY bit 31-0>    <AES_KEY bit 55-32>   0x1
+	fuse prog -y 33 0 <AES_KEY bit 95-56>   <AES_KEY bit 111-96>  0x1
+	fuse prog -y 34 0 <AES_KEY bit 143-112> <AES_KEY bit 167-144> 0x1
+	fuse prog -y 35 0 <AES_KEY bit 199-168> <AES_KEY bit 223-200> 0x1
+	fuse prog -y 36 0 <AES_KEY bit 255-224> 0x0 0x1
+
+	For example:
+	AES key
+	ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890
+	fuse prog -y 32 0 0x12EFCDAB 0x00785634 0x1
+	fuse prog -y 33 0 0xEFCDAB90 0x00563412 0x1
+	fuse prog -y 34 0 0xCDAB9078 0x003412EF 0x1
+	fuse prog -y 35 0 0xAB907856 0x0012EFCD 0x1
+	fuse prog -y 36 0 0x90785634 0x0 0x1
+
+	/* prog efuse row to select CSK valid - the first empty row specifies
+	 * the CSK index
+	 */
+	fuse prog -y 37~50 0 0x00000001 0x00000000 0x1
+
+	For example:
+	/* prog efuse row to select CSK 3 valid,need to set bit[0] in the efuse
+	 * rows 37, 38 and 39 to non zero values and leave the efuse row 40
+	 * intact
+	 */
+	fuse prog -y 37 0 0x00000001 0x00000000 0x1
+	fuse prog -y 38 0 0x00000001 0x00000000 0x1
+	fuse prog -y 39 0 0x00000001 0x00000000 0x1
+
+	/* prog flash ID to efuse row 30 */
+	fuse prog -y 30 0 0xbaddf00d 0x00000000 0x1
+
+	/* prog flash ID to efuse row 31 */
+	fuse prog -y 31 0 0xdeadbeef 0x00000000 0x1
+
+	/* LD efuse rows(256bits width) programming */
+	/* For A8k SoCs, both AP and SB0/1 have LD0 and LD1 efuse rows.
+	 * Only LD1 rows could be programmed.
+	 * Efuse row 65 is AP LD1 while row 67 is SB0 LD1. Row 69 is SB1 LD1.
+	 * /
+	fuse prog -y <RowIndex> 0 <bit 31-0> <bit 63-32> <bit 95-64>
+	<bit 127-96> <bit 159-128> <bit 191-160> <bit 223-192> <bit 255-224>
+
+	Below example shows secure boot fusing to select CP0_SPI as boot device.
+
+	/* enable trusted boot and disable JTAG permanent, select boot device
+	 * (from AP perspective, here the value is 0x0 which means IHB to select
+	 * device. Please see Table(Boot Source Options) for boot device
+	 * selection in functional specifications document), enable CPU
+	 * Wakeup/Enable in AP LD1.
+	 */
+	fuse prog -y 65 0 0x00000001 0x0000C000 0x00000000 0x00000000
+			  0x00000000 0x00000000 0x00000000 0x00000000
+
+	/* enable trusted boot and disable JTAG permanent, select boot device
+	 * (from SB perspective, the value is 0x32 which means boot from CP0_SPI
+	 * Please see the HW sepcificaiton document for a list of supported
+	 * values), disable ICU message LD1 in SB0
+	 */
+	fuse prog -y 67 0 0x000000c9 0x00000001 0x00000000 0x00000000
+			  0x00000000 0x00000000 0x00000000 0x00000000
+
+	/* enable trusted boot and disable JTAG permanent, select boot device
+	 * (from SB perspective, the value is 0x32 which means boot from CP0_SPI
+	 * Please see the HW sepcificaiton document for a list of supported
+	 * values), disable ICU message LD1 in SB1
+	 */
+		fuse prog -y 69 0 0x000000c9 0x00000001 0x00000000 0x00000000
+				  0x00000000 0x00000000 0x00000000 0x00000000
+
+   .. Note::
+	HD_efuse (bank ID 0~63's bit56-63 must be 0x0 according to Functional
+	Specification document). Efuse row 64,66,68 are LD0 and read-only.
+
+5. Verify the efuse values for correct efuse rows using "fuse read" commands.
+6. Restart the system and ensure the secure boot authentication stage has been
+   passed.
+7. If the image encryption option is required, build a new image with image
+   encryption enabled and burn it to the system boot device using the regular
+   "bubt" command.
+
+A3700 platforms
+~~~~~~~~~~~~~~~
+1. Create an UNTRUSTED boot image with eFuse command module support (as stated
+   in the "eFuses" chapter above) and burn it on the target flash device using
+   the regular "bubt" command.
+2. Create a TRUSTED boot image with Encryption option (as stated in "Boot image
+   format" chapter above)and save it for later use. Actually, encryption option
+   is enabled by default to "AES-256-CBC"(only AES-256 CBC is supported).
+3. Boot the target board with the UNTRUSTED boot image.
+4. Run the below commands in uboot before burning TRUSTED boot image
+	a. efuse write ENCRYPTION <binary value> (it always is 10 -- enable
+	   encryption for primary type image)
+	b. efuse write AES256_KEY <AES-256 key value>
+	c. efuse write BOOT_DEVICE <device_type>
+	d. efuse write KAK_DIGEST <otphash_value>
+	e. efuse write CSK_INDEX <key_index>
+	f. efuse write OPER_MODE <mode_type> (mode_type should be always 2).
+	g. efuse DEV_DEPLOY <deploy_value> (1 - enable/0 - disable), this
+	   command will set the chip into trusted mode.
+	   It will also hide the AES-256 key.
+5. Burn the TRUSTED boot image using regular "bubt" command.
+6. Reset the board and verify that the trusted boot mode works.
+
+.. Note::
+	a. binary value: supports 00/01/10/11 disable/.../enable encryption for
+	   primary type image/...
+	b. AES-256 value: AES-256 symmetric encryption key in HEX format.
+	   The values are in the aes-256.txt file.
+	c. device_type: SPINOR, SPINAND, EMMCNORM..., select device flash
+	   according to requirement.
+	   After selecting device_type by efuse, the device could not be changed
+	   anymore. The device flash is locked.
+	d. otphash_value: OEM key generated by tbb tool when signature the TIM
+	   header with kak.txt
+	e. key_index: Range 0 to 15 in DEC format to select which CSK KEY is
+	   used.
+	f. mode_type: Operation mode in range of 0 to 3, where mode 2 is Trusted
+	   boot, security check is performed on the boot device content
+	g. deploy_value: Enable(1) this feature will mask AES-256 KEY value. The
+	   command is optional. When secure trusted images need to hide AES-256
+	   KEY value to stop reading.
+
+<otphash_value>
+   When the trusted boot image is created, the the TBB tool saves the OEM key
+   in OtpHash.txt. This digest value is otphash_value which is used for efuse
+   KAK_DIGEST command.
+   The OtpHash.txt file lists the otphash_value in groups of 4-bytes values,
+   organized in the following
+   order::
+
+       LSB
+       ...
+       ...
+       MSB
+
+   These otphash_value should be converted to a single 32-bytes value for
+   eFuse burning::
+
+       MSB ... ... ... LSB.
+
+   For instance, the following otphash_value::
+
+       0x1887C298
+       0x59C9AFD9
+       0x6E814E34
+       0x25CD518B
+       0x3CDB7EED
+       0x33CC58B1
+       0x2C69997A
+       0xC27B7242
+
+   Will be used in the following form in eFuse KAK digest write command::
+
+       efuse write KAK_DIGEST C27B72422C69997A33CC58B13CDB7EED25CD518B6E814E3459C9AFD91887C298
+
+<key_index>
+   key_index is the index of the "timnsign.txt", refer to "timnsign.txt" in the
+   previous chapter for detailed description.
+   For instance, the following sample content is from timnsign.txt::
+
+      DSA Algorithm ID:                7		; Signed with CSK6
+      Hash Algorithm ID:               32
+      Key Size in bits:                2048
+      RSA Public Exponent
+	  ... ... ... ...(aligned with CSK6 file)
+	  ... ... ... ...
+	  RSA System Modulus:
+	  ... ... ... ...(aligned with CSK6 file)
+	  ... ... ... ...
+	  RSA Private Key:
+	  ... ... ... ...(aligned with CSK6 file)
+	  ... ... ... ...
+
+   The key_index will be used in the following form in eFuse CSK_INDEX
+   write command::
+
+      efuse write CSK_INDEX 6
+
+i.e.
+
+Default commands before bubt Secure Trusted boot image::
+
+	efuse write ENCRYPTION 10
+	efuse write AES256_KEY 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
+	efuse write BOOT_DEVICE SPINOR
+	efuse write KAK_DIGEST C27B72422C69997A33CC58B13CDB7EED25CD518B6E814E3459C9AFD91887C298
+	efuse write CSK_INDEX 6
+	efuse write OPER_MODE 2
+
+
+Authentication/Encryption Keys Generation and Selection
+-------------------------------------------------------
+
+A3700 platforms
+~~~~~~~~~~~~~~~
+
+A3700 platform supports selecting 16 authentication key files(CSK[0-F].txt
+in the A3700_utils/tim/trusted/keys/ folder) for trusted boot.
+All of the authentication keys files must be generated by TBB tool before
+building Secure Trusted image.
+
+KAK.txt (Keysignauture file) is also generated by using the same Key Generation
+command.
+
+From the above chapters decriptions, in order to update the authentication keys
+of the Secure Trusted Image, we could update two files (kak.txt/timnsign.txt)
+stored in the A3700_utils/tim folder.
+Please follow the below steps to update these files.
+
+1. Key Generation command::
+
+       tbb_linux.exe -G <<path\>KeyGeneration.txt>
+
+   Normally KeyGenernation.txt is stored in the A3700_utils/tim/trusted/keys/
+   folder. If the file is a directory other than the directory from which TBB
+   is executed, then a file path must also be provided.
+
+2. KeyGeneration.txt
+
+   Content::
+
+	Seed: Trusted platform
+	Key ID: DSIG
+	Encrypt Algorithm ID: 7
+	Hash Algorithm ID: 32
+	Key Size: 2048
+	Output Binary Filename:
+	Output Text Filename: ./KAK.txt
+
+   - Seed - The ASCII seed value can be any continuous ASCII alphanumeric
+	sequence delimited by white-space. TBB hashes the ASCII seed value to
+	a 32-bit value and uses that value to seed the random number generator.
+
+   - Key ID - The ASCII tag can be any 4-character string. i.e. DSIG -- means
+	that it will be created for digital signature.
+
+   - Encrypt Algorithm ID - i.e.7 = PKCS_2_2(ippcp). Currenlty, only 7 is
+	supported.
+
+   - Hash Algorithm ID - Hash Algorithm uses the Hash Algorithm ID to hash the
+	data associated with the key.
+	i.e. 20 = SHA160, 32 = SHA256, 64 = SHA512. Our A3700 use 32 as default.
+
+   - Key Size - For PKCS, the supported key sixe in bits is 2048.
+
+   - Output Binary Filename - if blank, no binary file is generated.
+	Normally, we keep this empty.
+
+   - Output Text Filename - if a path\filename is provided, TBB outputs an
+	ASCII txt file containing the generated key components.
+
+3. Update kak.txt files according the KAK.txt file. Copy the KAK.txt to
+   the A3700_utils/tim/trusted folder and update some parameters
+   Rename KAK.txt to kak.txt in the A3700_utils/tim folder.
+   Change the kak.txt file headers in the content:
+
+       Key ID: DSIG
+       Encrypt Algorithm ID: 7
+       ... ... ... ...
+
+   to below format::
+
+       DSA Algorithm ID:                7		; Signed with KAK
+       ... ... ... ...
+
+   The kak.txt is used to be generated to OtpHash.txt mentioned in the above
+   chapter.
+
+4. Update timnsign.txt file content to select CSK_Index
+
+   Update all parameters(DSA Algorithm ID/Hash Algorithm ID/Key Size in bits
+   /RSA Public Exponent/RSA System Modulus/RSA Private Key) value in
+   timnsign.txt according to CSK[0-F].txt files located in tools/wtp/key folder.
+   For instance, if you decide to use CSKA file (eFsue write CSK_INDEX 10),
+   you should update timnsign.txt's parameters aligned with CSKA.txt file.
diff --git a/doc/mvebu/uart_boot.txt b/doc/mvebu/uart_boot.txt
new file mode 100644
index 0000000000..19f4d3ed41
--- /dev/null
+++ b/doc/mvebu/uart_boot.txt
@@ -0,0 +1,115 @@
+UART boot
+=========
+
+UART boot for Armada-70x0/80x0
+------------------------------
+
+UART boot is used to load flash-image.bin using the Xmodem interface
+when the board boots for the first time or when the board fails to
+boot.
+
+1. Set the board to receiving mode using either of the following
+   methods:
+
+	- Start a terminal application (e.g. minicom), and send the
+	  Xmodem_boot_pattern.bin file in ASCII (located under
+          /tools/marvell/xmodem/xmodem_boot.pattern),
+	  (for minicom do: Ctrl+A, then S, then select ASCII), and
+	  reset the board at the same time.
+	- This option is only relevant for Marvell development boards:
+	  Set the boot source to UART, using boot source DIP-switch
+	  pins, and then reset the board.
+
+2. After booting from UART, or sending the pattern file, characters
+   are displayed on the screen every second. These are the Xmodem
+   NACKs that indicate readiness to send the new ATF with the Xmodem
+   protocol.
+
+3. Start the TTY transfer using the Xmodem protocol
+   (for minicom do: Ctrl+A, then S, and select the Xmodem protocol).
+
+4. Select flash-image.bin file, and start the transfer.
+
+5. When the transfer is done, U-Boot will start and you should hit
+   'return' to get the U-Boot prompt.
+
+6. Refer to "doc/mvebu/cmd/bubt.txt" for instructions how to burn
+   flash-image.bin to the boot device
+
+
+UART boot for Armada-3700 platform
+----------------------------------
+
+Note that WtpDownload application (v3.3.11.15) is Linux host tool used
+to do the UART boot. The source code and binaries is provided as part
+of A3700 utility package, which is out of the bootloader source tree.
+The package is located in same folder of the bootloader source. Please
+refer to the readme.txt in wtptp/src/Wtpdownloader_Linux folder for the
+prerequisitions of the tool.
+
+The following shows the detail steps of UART boot. The target board is
+connected to /dev/ttyUSB0 in this example, replace the port number
+according to your set-up.
+
+1. The normal ATF build procedure for A3700 target creates a folder
+   with all the images required for UART boot under ATF build output
+   folder (A.K.A., build/a3700/release or build/a3700/debug). Make
+   sure u-boot was built before ATF, see detail in build.txt.
+
+2. Make sure the target board is in UART mode and ">" prompt is
+   presented on the connected terminal. Pressing "Enter" in this mode
+   will show "E" and then ">" again.
+   There is a way to stop the target board booting from other sources,
+   SPI flash for example, and switch to UART boot mode, by using the
+   WtpDownload application::
+
+	(power down the board or hold the RESET button)
+	sudo stty -F /dev/ttyUSB0 clocal
+	(power up the board or release the RESET button)
+	./WtpDownload_linux -P UART -C 0 -R 115200 -Y
+
+3. Stop the terminal emulator program on the UART port attached to the
+   target board (minicom) for releasing the serial port and allowing
+   an application to use it for image download.
+
+4. Disable the TTY modem control signals::
+
+	sudo stty -F /dev/ttyUSB0 clocal
+
+5. Start the image download application in the ATF build folder using
+   the following parameters.
+
+   WTP downloader usage example - non-secure boot::
+
+	./WtpDownload_linux -P UART -C 0 -R 115200 \
+		-B ./uart-images/TIM_ATF.bin \
+		-I ./uart-images/boot-image_h.bin \
+		-I ./uart-images/wtmi_h.bin -E
+
+   WTP downloader usage example - secure boot::
+
+	./WtpDownload_linux -P UART -C 0 -R 115200 \
+		-B ./uart-images/TIM_ATF_TRUSTED.bin \
+		-B ./uart-images/TIMN_ATF_TRUSTED.bin \
+		-I ./uart-images/boot-image_h.bin \
+		-I ./uart-images/wtmi_h.bin -E
+
+   Note that "-E" parameter can be dropped from the above commands.
+   If you do this, check that the BootROM UART download mode is
+   selected in paragraph 2, type in terminal "wtp" without quotes and
+   press Enter. Then follow the procedure described in paragraph 3.
+   This command will switch the BootROM to WTP download mode. The same is
+   archieved by "-E" parameter in latest downloader SW.
+
+6. After the process is finished, start the terminal emulator
+   program (minicom) on that the UART port attached to the target
+   board and ensure the U-Boot prompt is reached.
+
+Note that steps 2-5 can be simplified with a single command as below::
+
+	sudo stty -F /dev/ttyUSB0 clocal
+	./WtpDownload_linux -P UART -C 0 -R 115200 \
+		-B ./uart-images/TIM_ATF.bin \
+		-I ./uart-images/boot-image_h.bin \
+		-I ./uart-images/wtmi_h.bin -E -O
+
diff --git a/doc/mvebu/uboot_cmd.txt b/doc/mvebu/uboot_cmd.txt
new file mode 100644
index 0000000000..10616a53c4
--- /dev/null
+++ b/doc/mvebu/uboot_cmd.txt
@@ -0,0 +1,384 @@
+.. _uboot_cmd:
+
+U-Boot Commands
+===============
+
+For standard U-Boot commands (mmc, usb, sata, fdt), please refer to denx
+mainline documentation.
+
+
+Base command
+------------
+Base command provides the ability to change the base address of a memory command
+(ir, md, mm, etc..).
+
+   Examples:
+
+	(1) Show the current base address::
+
+		> base
+
+		Base Address: 0x00000000
+
+	(2) change the base address::
+
+		> base 0xf2000000
+
+		Base Address: 0xf2000000
+
+
+BUBT (Burn ATF) command
+-----------------------
+Bubt command is used to burn a new ATF image to flash device.
+
+The bubt command gets the following parameters: ATF file name, destination
+device and source device::
+
+	bubt [file-name] [destination [source]]
+
+	- file-name:	Image file name to burn. default = flash-image.bin
+	- destination:	Flash to burn to [spi, nand, mmc]. default = active flash
+	- source:	Source to load image from [tftp, usb]. default = tftp
+
+Examples:
+
+	``bubt``			- Burn flash-image.bin from tftp to active flash
+	``bubt latest-spi.bin nand``	- Burn latest-spi.bin from tftp to NAND flash
+
+.. Note::
+	- For the TFTP interface set serverip and ipaddr.
+	- To burn image to SD/eMMC device, the target is defined
+	  by parameters CONFIG_SYS_MMC_ENV_DEV and CONFIG_SYS_MMC_ENV_PART.
+
+Bubt command details (burn image step by-step)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+This section describes bubt command flow:
+
+1. Fetch the requested ATF image from an available interface (USB/SD/SATA/XDB, etc.)
+   into the DRAM, and place it at <load_address>
+   Example: when using the FAT file system on USB flash device::
+
+	# usb reset
+	# fatls usb 0 (see files in device)
+	# fatload usb 0 <load_address> <file_name>
+
+2. Erase the target device::
+
+	- NAND:		# nand erase 0 100000
+	- SPI:		# sf probe 0
+			# sf erase 0 100000
+	- SD/eMMC:	# mmc dev <dev_id> <boot_partition>
+
+   .. Note::
+	- The eMMC has 2 boot partitions (BOOT0 and BOOT1) and a user data
+	  partition (DATA). The boot partitions are numbered as partition 1 and
+	  2 in MMC driver. Number 0 is used for user data partition and should
+	  not be utilized for storing boot images and U-Boot environment in RAW
+	  mode since it will break file system structures usually located here.
+
+	  The default boot partition is BOOT0. It is selected by the following
+	  parameter::
+
+		CONFIG_SYS_MMC_ENV_PART=1
+
+	  Valid values for this parameter are 1 for BOOT0 and 2 for BOOT1.
+	  Please never use partition number 0 here!
+
+	- The partition number is ignored if the target device is SD card.
+
+	- The boot image offset starts at block 0 for eMMC and block 1 for SD
+	  devices. The block 0 on SD devices is left for MBR storage.
+
+3. Write the ATF image::
+
+	- NAND:		# nand write <load_address> 0 <ATF Size>
+	- SPI:		# sf write <load_address> 0 <ATF Size>
+	- SD/eMMC:	# mmc write <load_address> [0|1] <ATF Size>/<block_size>
+
+
+hw_info command
+---------------
+hw_info commands are used for the following:
+
+  - Store HW manufacturing information to EEPROM during the board production in
+    order to keep these parameters, regardless of the boot-loader upgrading.
+  - Load HW manufacturing information from the EEPROM to the relevant U-Boot
+    env variable in order to take effect.
+
+.. Note::
+	hw_info commands are only relevant for Marvell boards that use the
+	EEPROM device to save the HW manufacturing information.
+
+
+hw_info usage
+~~~~~~~~~~~~~
+- ``hw_info dump [name]``  - Dump all or specific HW parameters from the EEPROM.
+
+- ``hw_info load [name]``  - Load all or specific HW parameters from the EEPROM
+			     to env variables. The hw_info load will be
+			     performed automatically with the ``env default -a``
+			     operation, however it requires that the user
+			     executes ``env save`` manually, later on.
+
+- ``hw_info store [name]`` - Store all or specific HW parameters from env
+			     variables to the EEPROM. Before the operation, the
+			     expected env varibles should already be saved to
+			     env by using the command setenv or editenv.
+
+Supported HW information parameters:
+
+	- board_id      board ID
+	- pcb_slm       PCB system level manufacturing part ID (SLM)
+	- pcb_rev       PCB revision number
+	- eco_rev       ECO revision number
+	- pcb_sn        PCB SN
+	- ethaddr       first MAC address
+	- eth1addr      second MAC address
+	- eth2addr      third MAC address
+	- eth3addr      fourth MAC address
+
+Examples
+~~~~~~~~
+1. Initialize or change HW manufacturing information for the Armada-3700::
+
+	# setenv board_id 0020
+	# setenv pcb_slm 1443
+	# setenv pcb_rev 10
+	# setenv eco_rev 12
+	# setenv pcb_sn 0028
+	# setenv ethaddr 00:50:43:00:00:01
+	# setenv eth1addr 00:50:43:00:00:02
+	# setenv eth2addr 00:50:43:00:00:03
+	# setenv eth3addr 00:50:43:00:00:04
+	# saveenv
+	# hw_info store
+
+2. Restore HW manufacturing information env variables after the resetenv command::
+
+	# hw_info load
+	# saveenv (optional since hw_info load will ask user whether to saveenv)
+
+3. Dump HW parameters from EEPROM
+
+	# hw_info dump
+
+
+ir command
+----------
+Reading and changing internal register values.
+
+Displays the contents of the internal register in 2 forms, hex and binary.
+It is possible to change the value by writing a hex value beginning with 0x
+or by writing 0 or 1 in the required place.
+Pressing enter without any value keeps the value unchanged.
+
+NOTE: before using the ir command, the base address (using base command,
+described above) must be set:
+
+	- Armada3700	-	0xd0000000
+	- AP806		-	0xf0000000
+	- CP110-0	-	0xf2000000
+	- CP110-1	-	0xf4000000
+
+Example::
+
+	# base 0xf4000000
+	Base Address: 0xf4000000
+	# ir 440000
+	Internal register 0x440000 value : 0x33333333
+
+	31      24        16         8         0
+	 |       |         |         |         |
+	OLD: 0011-0011-0011-0011-0011-0011-0011-0011
+	NEW:             00           1			/* Set specific bits */
+
+	New value = 0x33033b33
+
+	# ir 440000
+	Internal register 0x440000 value : 0x33033b33
+
+	31      24        16         8         0
+	 |       |         |         |         |
+	OLD: 0011-0011-0000-0011-0011-1011-0011-0011
+	NEW:	/* Press enter to keep the value unchanged */
+
+
+
+mg_boot command
+---------------
+mg_boot command allows to load MG CM3 firmware and emulate MG's CM3 UART
+
+Introduced commands allows to load MG CM3 firmware into MG's CM3 SRAM and
+release it from reset. The MG's CM3 doesn't have hardware UART but after
+enabling CMD_MVEBU_MG_BOOT option, UART emulation can be used and console
+input/output can be redirected to MG's CM3
+
+The MG's CM3 UART emulation is done in the shared memory where both MG's CM3
+and ARMv8 has access to. The CM3 instead of putting some characters into UART
+registers, puts char into memory which can be read by ARMv8 U-Boot.
+
+Receiving character from CM3 perspective: The CM3 polls some other part of
+shared memory, if it finds some new chars it process it (instead of reading UART
+register). Thanks to that, ARMv8 U-Boot can send some characters to this
+shared memory and the CM3 will be able to receive and process them.
+
+A complementary patch can be found in FreeRTOS github repo:
+"a8k_mg: add uart emulation support"
+
+parameters:
+
+	- remote_file_name - TFTP image path to be loaded to MG CM3 SRAM
+	- cp_nr - CPx number [0 | 1]
+	- io_redirect - redirect console IO to CM3 [0=no (deflt) | 1=yes]
+
+Load the FreeRTOS firmware and switch to emulated MG's CM3 console::
+
+	# mg_boot path/to/tftpfile/RTOSDemo-cm3-mg.bin 0 1
+	# Using egiga1 device
+	# TFTP from server 10.2.0.102; our IP address is 10.2.2.182
+	# Filename 'path/to/tftpfile/RTOSDemo-cm3-mg.bin'.
+	# Load address: 0xf2100000
+	# Loading: #############
+	# 	 1.3 MiB/s
+	# done
+	# Bytes transferred = 61801 (f169 hex)
+	# Opening MG CM3 console..
+	# 	Use "poweroff" for powerdown CM3 and falling back to u-boot prompt
+	# 	Use "exit" falling back to u-boot prompt (CM3 still running)
+	#
+	#
+	# 	<some FreeRTOS log>
+
+.. Note::
+
+   Be aware that A8K MG's CM3 doesn't have hardware UART, therefore are emulated
+   console was prepared. After loading the CM3 firmware and using console
+   redirect (io_redirect set to 1), the emulated console of CM3 takes control
+   over A8K U-Boot's console.
+
+The logs from CM3 are not printed in real time, they are buffered in shared
+memory. To dump buffered log just:
+
+	- Press the 'Enter' key (this is needed to see logs that are buffered by
+	  FreeRTOS and they are not a direct result of entered command)
+	- Enter a command followed by 'Enter' key (this will dump log which is
+	  direct results of entered command)
+
+Falling back to u-boot console:
+
+  - To exit from it (and leave the CM3 running) do::
+
+	# MG-CM3>exit
+
+  - To exit and shutdown CM3 do::
+
+	# MG-CM3>poweroff
+
+
+mg_console command
+------------------
+
+mg_console command allows to switch console IO to CPn MG CM3. It is useful
+in cases where:
+
+- we run mg_boot without console IO redirection
+- we fall back to u-boot console but after some time we want to switch
+  back console redirection to CPn MG CM3
+
+parameters:
+- cp_nr - CPx number [0 | 1]
+
+Returning to MG CM3's console:
+
+If there is need to check status in CM3, we can return by running the command::
+
+	# Marvell>> mg_console 0
+
+Afterwards, we can dump what was buffered by FreeRTOS as described earlier by:
+
+- Pressing the 'Enter' key (this is needed to see logs that are buffered by FreeRTOS)
+- Enter new command followed by 'Enter' key (this will dump log which is direct
+  results of entered command)
+
+
+rx_training command
+-------------------
+
+RX training allows to improve link quality (for SFI/XFI mode) by running training
+sequence, this allows to reach better link quality then using static configuration.
+
+To perform rx_training there is need to connect the loopback module (rx and tx
+is physically looped using one fiber lane) first.
+
+.. _fig_rx_loopback_module:
+
+.. figure:: /images/rx_loopback_module.*
+   :align: center
+
+   Rx loopback module
+
+.. Note::
+        The "rx loopback module" is simple fiber patchcord but modified in way that
+        the same fiber lane goes to both rx and tx.
+
+When running rx_training sequence, the user must state CP index (0/1) and comphy ID (0/5).
+
+If after rx training procedure the kernel will be booted (without
+resetting/rebooting the board), Linux will skip comphy power off and power on
+sequence, so the user can test the link quality in Linux.
+
+After board reset/reboot the comphy parameters for SFI/XFI are the default one
+(the training results are not valid anymore after reset). If the user want to
+use values from training there are two options:
+        1) perform rx_training from u-boot after board reset
+        2) perform rx_training from u-boot and then apply the new parameters
+           using comphy porting layer.
+
+.. seealso::
+        Please refer to :ref:`porting` section: Comphy Porting.
+
+SAR (Sample at Reset) commands
+-------------------------------
+SAR commands are used to toggle the available Sample at Reset modes.
+
+.. Note::
+	- SAR commands are only relevant for Marvell boards that use EEPROM
+	  device.
+	- At first use, a reset should be done to SAR fields values with
+	  ``sar default`` command.
+	- In order to use SAR fields values a jumper should be in:
+
+		- jumper 52 in a8040-db
+		- jumper 38 in a7040-db
+
+	- After a SAR write command, a reset is required for the changes to
+	  take effect.
+
+Examples
+~~~~~~~~
+- ``sar list`` - Get the list of possible fields.
+- ``sar list <field>`` - Get the list of possible values for a specific field.
+- ``sar read`` - Get the current values of all available SAR fields.
+- ``sar read <field>`` - Get the current value of a specific SAR field.
+- ``sar write <field> <value>`` - Set the required value for a specific field.
+   A reset is required after a SAR write command for the changes to take effect.
+- ``sar default`` - Reset all writable SAR fields back to their default values.
+- ``sar default <field>`` - Reset SAR field back to his default value.
+
+The list of the Sample At Reset possible fields and values is defined in the
+device tree. For more information, please refer to
+doc/device-tree-bindings/misc/mvebu-sar.txt.
+
+
+tsen command
+-------------
+tsen command is used to display the SoC thermal sensor readout.
+When tsen command is executed, AP's and CP's temperature is sampled:
+
+Example::
+
+	Running 'tsen' on Armada-7040:
+
+	Marvell>> tsen
+	Thermal.f06f8084 = 49
+	Thermal.f2400070 = 53
-- 
2.22.0


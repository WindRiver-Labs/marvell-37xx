From cb465db7b3a5a2959ff712207c7cd1499cdec60b Mon Sep 17 00:00:00 2001
From: Igal Liberman <igall@marvell.com>
Date: Tue, 6 Nov 2018 14:17:00 +0200
Subject: [PATCH 0889/1200] fix: switch: mv88e6xxx: fix incorrect port device
 address value

Peridot switch port device address starts from 0.
Legacy switch port device address starts from 0x10.

Currently we use REG_PORT_BASE_LEGACY (0x10) in order
to read the ID and define which address should be used.

This will work only for LEGACY switches.

Instead, let's ready the ID using both address, one will return correct
value and the second, 0xFFFF.

Change-Id: I844d49e8f743c1734083a009f950bbb3e721ea7e
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/60721
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
Reviewed-by: Stefan Chulski <stefanc@marvell.com>
---
 drivers/net/phy/mv88e6xxx.c | 20 ++++++++++++++++++--
 drivers/net/phy/mv88e6xxx.h |  1 +
 2 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/drivers/net/phy/mv88e6xxx.c b/drivers/net/phy/mv88e6xxx.c
index dce2772c43..3bf660335c 100644
--- a/drivers/net/phy/mv88e6xxx.c
+++ b/drivers/net/phy/mv88e6xxx.c
@@ -17,7 +17,7 @@
 
 static struct mv88e6xxx_dev soho_dev;
 static struct mv88e6xxx_dev *soho_dev_handle;
-static int REG_PORT_BASE = REG_PORT_BASE_LEGACY;
+static int REG_PORT_BASE = REG_PORT_BASE_UNDEFINED;
 
 static int mv88e6xxx_reg_wait_ready(struct mv88e6xxx_dev *dev)
 {
@@ -296,7 +296,22 @@ int mv88e6xxx_get_switch_id(struct mv88e6xxx_dev *dev)
 {
 	int id, product_num;
 
-	id = mv88e6xxx_read_register(dev, REG_PORT(0), PORT_SWITCH_ID);
+	/* Peridot switch port device address starts from 0
+	 * Legacy switch port device address starts from 0x10
+	 *
+	 * In order to determine which switch is used, we need to
+	 * read the ID, but inorder to read the ID, we need to know
+	 * the port device address - classic chicken or the egg case.
+	 *
+	 * Let's read with both port device addresses, if we get 0xFFFF,
+	 * the address is incorrect and we need to ready with the second
+	 * address.
+	 */
+	id = mv88e6xxx_read_register(dev, REG_PORT_BASE_LEGACY, PORT_SWITCH_ID);
+	if (id == 0xFFFF)
+		id = mv88e6xxx_read_register(dev, REG_PORT_BASE_PERIDOT,
+					     PORT_SWITCH_ID);
+
 	if (id < 0)
 		return id;
 
@@ -310,6 +325,7 @@ int mv88e6xxx_get_switch_id(struct mv88e6xxx_dev *dev)
 	} else if (product_num == PORT_SWITCH_ID_PROD_NUM_6141 ||
 		   product_num == PORT_SWITCH_ID_PROD_NUM_6341) {
 		/* Legacy switch port device address starts from 0x10 */
+		REG_PORT_BASE = REG_PORT_BASE_LEGACY;
 		return id;
 	} else {
 		return -ENODEV;
diff --git a/drivers/net/phy/mv88e6xxx.h b/drivers/net/phy/mv88e6xxx.h
index 26baed50eb..7083b7dba1 100644
--- a/drivers/net/phy/mv88e6xxx.h
+++ b/drivers/net/phy/mv88e6xxx.h
@@ -47,6 +47,7 @@
 #define REG_FIBER_SERDES			0x0f
 #define PAGE_FIBER_SERDES			0x01
 
+#define REG_PORT_BASE_UNDEFINED			0xFFFF
 #define REG_PORT_BASE_LEGACY			0x10
 #define REG_PORT_BASE_PERIDOT			0
 #define REG_PORT(p)				(REG_PORT_BASE + (p))
-- 
2.22.0

